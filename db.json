{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1528633461413},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1528633461413},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1528633461413},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1528633461413},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1528633461416},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1528633461416},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1528633461416},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1528633461416},{"_id":"themes/next/README.md","hash":"ca711f92e985183030de7b7fcc6efd9018c638b8","modified":1528633461416},{"_id":"themes/next/_config.yml","hash":"30bb85c69839f8a291b1568854097128a2ae69c7","modified":1530173181930},{"_id":"themes/next/bower.json","hash":"72d7f5ef565cca1da30ba64fc04075b9ac99e319","modified":1528633461416},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1528633461416},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1528633461416},{"_id":"themes/next/package.json","hash":"735ace0b7fe3b1171c220c5424fcd4fe3aadd7f8","modified":1528633461471},{"_id":"source/_posts/CS1-6自瞄简单分析.md","hash":"ec8a04ad491aab4a123988f01d630daae0a87fbe","modified":1529204999280},{"_id":"source/_posts/hello-world.md","hash":"6d45ccf07a7a4afec55a73ac694c5cbb9e314801","modified":1528729579399},{"_id":"source/_posts/对LuaJIT制作的游戏的简单修改（一）.md","hash":"72fe99ee3c92e2a8bcf644e21131a4fa180a8bf4","modified":1529205748600},{"_id":"source/_posts/对LuaJIT制作的游戏的简单修改（二）.md","hash":"bd93c89e59cf9f6c4bdeb894b4b300a441c58540","modified":1529932310005},{"_id":"source/about/index.md","hash":"2094754ec773aa11dc5d4c1c130fc5e842a2429a","modified":1528730544746},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1528633461414},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"869dcd36524e2c61ddd2315c1266edca7f0da6c9","modified":1528633461414},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1528633461415},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1528633461415},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1528633461415},{"_id":"themes/next/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1528633461416},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1528633461416},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1528633461416},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1528633461416},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1528633461416},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1528633461416},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1528633461416},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1528633461416},{"_id":"themes/next/docs/MATH.md","hash":"34a46ca9a05b4570903beaadd4807e6759afb52e","modified":1528633461416},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1528633461416},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1528633461416},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1528633461416},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1528633461416},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1528633461416},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1528633461416},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1528633461416},{"_id":"themes/next/languages/ja.yml","hash":"7836f1de1f383d3a53770a03498cc39a37674f0c","modified":1528633461432},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1528633461433},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1528633461433},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1528633461433},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1528633461434},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1528633461434},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1528633461434},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1528633461435},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1528633461435},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1528633461436},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1528633461435},{"_id":"themes/next/layout/_layout.swig","hash":"4a3e7ebb0d4f88a64e919695aa4272221fe88347","modified":1528633461437},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1528633461470},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1528633461470},{"_id":"themes/next/layout/index.swig","hash":"9257f8c35b1eeb3dbc3eb8e7c791620d9ce931f3","modified":1528633461470},{"_id":"themes/next/layout/post.swig","hash":"ce227737a6273c6ba729fa426418ec3f9722fdb4","modified":1528633461470},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1528633461470},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1528633461470},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1528633461471},{"_id":"themes/next/scripts/helpers.js","hash":"c91522de30a85cd36b3547ad3446c34e4ba618ef","modified":1528633461471},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1528633461473},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1528633461473},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1528633461546},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1528633461546},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1528633461547},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528633461521},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1528633461416},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1528633461416},{"_id":"themes/next/docs/ru/README.md","hash":"a78a155885ce23f924cd194b8c69fe7f2ffea8d0","modified":1528633461416},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1528633461416},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1528633461416},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1528633461416},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"f2a2d6e68c5f65e27303b40f5285a8a4a5adae4c","modified":1528633461416},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1528633461416},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1528633461416},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1528633461416},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"4d68054b062b3c8404b146a155d9624d2d25dd9b","modified":1528633461416},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"1ec7a0e9ac64b2c84aa1fd7ba2c662be1dbcb407","modified":1528633461416},{"_id":"themes/next/docs/zh-CN/README.md","hash":"a4d2c1f90d5bd1d54f92b39b47ff85b1fe8b4e81","modified":1528633461416},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1528633461436},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1528633461437},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1528633461437},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1528633461439},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"da831b8f1a9a6cbf9897318cad82be76254b62ab","modified":1528633461439},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1528633461439},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1528633461440},{"_id":"themes/next/layout/_macro/post.swig","hash":"b1ef162930827e4d57a29c4cf0cd349b36c30323","modified":1528633461440},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1528633461441},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1528633461441},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1528633461442},{"_id":"themes/next/layout/_partials/comments.swig","hash":"2e8c3df265e9ae38003d1321fb80fb3b12cb6a97","modified":1528633461442},{"_id":"themes/next/layout/_partials/footer.swig","hash":"215a6689bdb6a0fcf58ccb6c28e93d6864b7e00a","modified":1528633461442},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1528633461446},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1528633461446},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1528633461458},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1528633461461},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1528633461461},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1528633461462},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1528633461464},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1528633461464},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1528633461464},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1528633461465},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1528633461465},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1528633461450},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1528633461450},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1528633461450},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1528633461452},{"_id":"themes/next/scripts/tags/button.js","hash":"496e3846f353d253dad944b2ed8fdc4e02dcc28a","modified":1528633461474},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"5c87817385986748617fa87dee9cba654566adcd","modified":1528633461474},{"_id":"themes/next/scripts/tags/exturl.js","hash":"4f928ef9ad0ae8e3d766352b8861bc22f96de5d8","modified":1528633461475},{"_id":"themes/next/scripts/tags/full-image.js","hash":"2118895d2d5e379240b27399a6c988a74f25a427","modified":1528633461475},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"696157d4e4382fdbe29c674b0f4b433d47db449b","modified":1528633461476},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"1f7bafba9cf3c94f5735873bd52e93ddcf37f8a2","modified":1528633461476},{"_id":"themes/next/scripts/tags/label.js","hash":"d8bfb2974c6afef2c085642857b70b6569b4a097","modified":1528633461478},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"92c0ead5f503cfc4ee7c254ebfb00a2623fa1890","modified":1528633461478},{"_id":"themes/next/scripts/tags/note.js","hash":"1cec218c9fcaa8fb4144bf9d0b39babcaafac8d4","modified":1528633461478},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1528633461479},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1528633461521},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1528633461522},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1528633461522},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1528633461522},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1528633461523},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1528633461523},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1528633461524},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1528633461524},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1528633461525},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1528633461525},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1528633461525},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1528633461526},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1528633461526},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528633461526},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1528633461527},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528633461527},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1528633461527},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1528633461527},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528633461528},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528633461451},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528633461452},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528633461508},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528633461508},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528633461509},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528633461520},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528633461521},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1528633461438},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1528633461438},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1528633461443},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1528633461444},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1528633461443},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1528633461445},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1528633461445},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1528633461445},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1528633461444},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1528633461453},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1528633461453},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1528633461454},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"c43f41b7f3c0743d1e673af2e787ea34a67fc9cb","modified":1528633461454},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1528633461454},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1528633461455},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"d67d9a176a276cdab6f2bcb7eb3650fbca5459c4","modified":1528633461455},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1528633461456},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1528633461456},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"7973b4741863362cd9d023216de4a43eb23dc227","modified":1528633461456},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1528633461457},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1528633461457},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1528633461457},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1528633461447},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1528633461447},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1528633461447},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1528633461448},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1528633461448},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1528633461448},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1528633461449},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1528633461449},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1528633461458},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"4a2d2269f23e90c1311bd867d22def0b4a092bf1","modified":1528633461458},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1528633461459},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"787d482d797c38e77d69629ebb88d45f972216b7","modified":1528633461459},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"18a58db53f1eef50462ee0065d4445b7fbb04fb5","modified":1528633461459},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7cf0c589d95a2d1848266ffe2357e91c95d2e7f8","modified":1528633461460},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"de1fac9bb3f0cab88b1ed1950f76c7eb0037aeda","modified":1528633461461},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"ab181c036cda9656f87bb1a749e3e7cbc437f012","modified":1528633461461},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1528633461463},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1528633461463},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1528633461463},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1528633461468},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1528633461467},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1528633461467},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1528633461467},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1528633461451},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1528633461452},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1528633461451},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1528633461508},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1528633461508},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1528633461509},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"4d6dd32dae6f0ea93d43c5cfa0106b6cb46c3b00","modified":1528633461509},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8b5fc9e6621a5de04ae7d9ef117683c69965fb00","modified":1528633461519},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1528633461519},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b89e68789e6dac24e00250528f4fc9ae8aa3599b","modified":1528633461520},{"_id":"themes/next/source/css/_variables/base.styl","hash":"534b9dec93f3e235c217b97314d4bf513fa3e5ba","modified":1528633461520},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1528633461528},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1528633461529},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"8e9ed6392620ba68726c0ade4868100d831daba8","modified":1528633461529},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1528633461529},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1528633461530},{"_id":"themes/next/source/js/src/motion.js","hash":"bea49fc6392bd38fb6f80d041d95d23051423aa2","modified":1528633461530},{"_id":"themes/next/source/js/src/post-details.js","hash":"02acfa1862d5e4345d6a7cee08841cc9e2fb0259","modified":1528633461531},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1528633461531},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1528633461532},{"_id":"themes/next/source/js/src/utils.js","hash":"bd22e8f524ba123b89ac7d10cdb2258ba7fe3fa5","modified":1528633461532},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1528633461533},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1528633461533},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1528633461533},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1528633461534},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1528633461534},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1528633461545},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1528633461545},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1528633461546},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1528633461541},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1528633461466},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1528633461466},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1528633461480},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1528633461480},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1528633461480},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1528633461481},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1528633461481},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1528633461487},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1528633461497},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1528633461505},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1528633461505},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"97bb39756e85f5b27bba7f43270105ad01d736c9","modified":1528633461505},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1528633461506},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1528633461507},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"52bc8ba71b91d954530b35dfc63b402a02b1321d","modified":1528633461507},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1528633461507},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1528633461511},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"c08eb379718fa5af267fd8c5fe9b926003c0c7c7","modified":1528633461510},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1528633461511},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1528633461511},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1528633461511},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1528633461512},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1528633461512},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1528633461513},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1528633461514},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1528633461514},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1528633461515},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1528633461515},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1528633461515},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1528633461516},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8878f733143afc1313a673049048ddd3532a50b8","modified":1530089394210},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1528633461517},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1528633461517},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1528633461517},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1528633461518},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1528633461519},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1528633461531},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1528633461535},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1528633461535},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1528633461536},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1528633461542},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1528633461542},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528633461539},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528633461540},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1528633461544},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1528633461482},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1528633461482},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1528633461483},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1530196639018},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1528633461484},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1528633461483},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1528633461484},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1528633461484},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"835c1340571bd6c4ec263c482cf13283fb047e49","modified":1528633461485},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1528633461485},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1528633461486},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1528633461486},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1528633461486},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1528633461487},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1528633461487},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1528633461487},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1528633461487},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1528633461488},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1528633461489},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1528633461489},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1528633461489},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1528633461490},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1528633461490},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1528633461490},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1528633461490},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1528633461491},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1528633461491},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1528633461491},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"adfd6d2d3b34adc4b476a0ea91e19020456a3b1a","modified":1528633461491},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1528633461493},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1528633461493},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1528633461494},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"1faeb3fca899df9d033e4e6ad9a4867cdce7ef9d","modified":1528633461493},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"debe322cc9e2688ecf38d0b6afcd6b71ad02fbd0","modified":1528633461494},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1528633461495},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1528633461494},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1528633461495},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1528633461496},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1528633461496},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1528633461496},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1528633461497},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1528633461497},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1528633461498},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1528633461498},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1528633461498},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"d79c051abb8ab7b5ee5da29a28587704fd5108f5","modified":1528633461498},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1528633461499},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1528633461499},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1528633461501},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1528633461500},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1528633461502},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1528633461501},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1528633461502},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1528633461502},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1528633461502},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1528633461503},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1528633461503},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1528633461503},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1528633461504},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1528633461504},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1528633461513},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1528633461514},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1528633461516},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"0b9c4140d7bc526553553552c3ed92da7c81e0b6","modified":1528633461504},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528633461538},{"_id":"public/about/index.html","hash":"b30b46663899a28f97166c59bb6b57a7baae6818","modified":1530196922230},{"_id":"public/2018/06/10/hello-world/index.html","hash":"b61024db490da0b1c8bd23745c86c6625ae77bb5","modified":1530196922230},{"_id":"public/archives/index.html","hash":"852c5b868e8ede61ca80f93e96e603f2ab50aa82","modified":1530196922230},{"_id":"public/archives/2018/index.html","hash":"59dc94b53ec71594b672e9edac2d4a2bbb80549b","modified":1530196922230},{"_id":"public/archives/2018/06/index.html","hash":"f7b34707158a1c0395e47b7758d0902f3d39bc89","modified":1530196922231},{"_id":"public/2018/06/25/对LuaJIT制作的游戏的简单修改（二）/index.html","hash":"b79d55e939add84371352768a4511b401fa12ba0","modified":1530196922231},{"_id":"public/2018/06/12/CS1-6自瞄简单分析/index.html","hash":"2fbb0e059ab909075e7771b7f54f27e1e64e52aa","modified":1530196922231},{"_id":"public/2018/06/11/对LuaJIT制作的游戏的简单修改（一）/index.html","hash":"f604764df82b9524dd5f9bad7dedaa4d46620db5","modified":1530196922231},{"_id":"public/index.html","hash":"427a537828965752b184f835d98e75f533c56f8a","modified":1530196922235},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1530196922235},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1530196922235},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1530196922235},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1530196922235},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1530196922235},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1530196922235},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1530196922235},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1530196922236},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1530196922236},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1530196922236},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1530196922236},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1530196922236},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1530196922236},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1530196922236},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1530196922236},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1530196922236},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1530196922236},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1530196922236},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1530196922236},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1530196922236},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1530196922795},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1530196922799},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1530196922804},{"_id":"public/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1530196922804},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1530196922804},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1530196922804},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1530196922804},{"_id":"public/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1530196922804},{"_id":"public/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1530196922804},{"_id":"public/js/src/utils.js","hash":"254fe047031981ec772728703fa6e065ede838b0","modified":1530196922804},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1530196922804},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1530196922804},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1530196922804},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1530196922804},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1530196922804},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1530196922804},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1530196922804},{"_id":"public/css/main.css","hash":"46edb008e515fb8a336eadefcf356136e9522ccb","modified":1530196922805},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1530196922805},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1530196922805},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1530196922805},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1530196922805},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1530196922805},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1530196922805},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1530196922805}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-06-11T15:17:42.000Z","comments":0,"_content":"\n咸鱼一枚。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-06-11 23:17:42\ncomments: false\n---\n\n咸鱼一枚。","updated":"2018-06-11T15:22:24.746Z","path":"about/index.html","layout":"page","_id":"cjiynqky60004novzp8zcvk3q","content":"<p>咸鱼一枚。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>咸鱼一枚。</p>\n"}],"Post":[{"title":"Hello World","_content":"没事随便写点东西自己看。\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n没事随便写点东西自己看。\n","slug":"hello-world","published":1,"date":"2018-06-10T12:10:42.949Z","updated":"2018-06-11T15:06:19.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiynqkrn0000novzpx7xl9uw","content":"<p>没事随便写点东西自己看。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>没事随便写点东西自己看。</p>\n"},{"title":"CS1.6自瞄简单分析","date":"2018-06-12T15:08:29.000Z","_content":"\n# 1.游戏相关信息\n\n游戏版本：Esai Cs1.6 Ver.3248\n\n显示模式：OpenGL\n\n下载地址：[《反恐精英》CS1.6 硬盘完美版](http://down.ali213.net/pcgame/CS1.6.html)\n\n\n\n<!-- more -->\n\n# 2.自瞄原理分析\n\n## 2.1 欧拉角\n\n在CS1.6中控制准心位置的数据是下面这三个：\n\n俯仰角(Pitch)、偏航角(Yaw)和滚转角(Roll)。 \n\n很多人说的鼠标的X和Y其实就是偏航角和俯仰角，偏航角控制左右移动，俯仰角控制上下移动，而滚动角一般用不到，可以先放到一边。\n\n关于欧拉角的更多知识（其实也不是很多）请参考这里：[LearnOpenGL - 欧拉角](https://learnopengl-cn.github.io/01%20Getting%20started/09%20Camera/#_6)\n\n## 2.2 世界坐标\n\n在计算角度之前我们还需要知道两组坐标，分别是自己的世界坐标和目标的世界坐标。\n\n世界坐标就是我们平常说的坐标，说白了就X、Y、Z。\n\n我下面会使用右手坐标系来讲，因为OpenGL用的也是右手坐标系。\n\n下面是右手坐标系的模型。\n\n![](http://wx2.sinaimg.cn/large/006juYZNgy1fsdzvuelrkj308306pglh.jpg)\n\n## 2.3 角度计算\n\n分别用两个二维平面来计算俯仰角和偏航角。\n\n我们以自己为原点建立坐标系，用敌人的世界坐标减去自己的世界坐标来得到相对坐标。\n\n\n\n俯仰角：\n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fsdzvy0jmvj30cg0c93yd.jpg)\n\n偏航角：\n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fsdzvwetj5j30cb0bqt8l.jpg)\n\n(图中的raw应该是yaw，懒得改了) \n\n我们可以用反正切函数arctan来算出俯仰角和偏航角，arctan对应的c函数是`atan`。但是因为`atan`的限制，在不同的象限时需要不同的处理，所以我们用`atan2`来计算。`atan2`的定义如下：\n\n![](http://wx3.sinaimg.cn/large/006juYZNgy1fsdzvrxs8bj30gz05vgm2.jpg)\n\n所以，\n\n```\npitch = atan2(deltaY, sqrt(deltaX * deltaX + deltaZ * deltaZ));\nyaw = atan2(deltaX, deltaZ);\n```\n\n需要注意的是，atan2算出来的结果是以弧度来表示的，后面需要转换成角度。\n\n\n\n# 3.代码实现\n\n## 3.1可能需要的数据\n\n这里提供一些可能会用到的数据。\n\n[mp.dll+16A470]+0x58\tCT人数\n\n[mp.dll+16A470]+0x5C\tT人数\n\ncstrike.exe+19E10C4\t\tpitch\n\ncstrike.exe+19E10C8\t\tyaw\n\ncstrike.exe+19E10CC\t\troll\n\ncstrike.exe+11544A0\t\t存放人物结构数组首地址\n\n结构大小为0x324，即可以用[cstrike.exe+11544A0]+i*0x324来获取每一个人物结构的首地址。\n\n经过调试发现i=0时的结构是空的，所以从i=1开始直到i=CT人数+T人数。\n\nZ、X、Y的偏移分别为0x88 0x8C 0x90\n\n这些数据的寻找过程挺复杂的，这里不讲。\n\n## 3.2核心代码\n\n计算角度并修改值\n\n```\n//target为目标,self为自己\ndeltaX = target.x - self.x;\ndeltaY = self.y - target.y;//在CS1.6中准心往上移时pitch减小，往下移时pitch增加，所以这里反一下。我也不知道是为什么。\ndeltaZ = target.z - self.z;\n\n//r2a为弧度转角度，这个大家可以自己写一下。\nmouse.pitch = r2a(atan2(deltaY, sqrt(deltaZ * deltaZ + deltaX * deltaX)));\nmouse.yaw = r2a(atan2(deltaX, deltaZ));\n\nWriteProcessMemory(hProcess, (LPVOID)(cstrikeAddr + 0x19E10C4), &mouse.pitch, 4, NULL);\nWriteProcessMemory(hProcess, (LPVOID)(cstrikeAddr + 0x19E10C8), &mouse.yaw, 4, NULL);\n```\n\n至于怎么选择目标，大家可以自己实现，可能会用到的数据都放在上面了。\n\n\n\n# 4.后话\n\nCS1.6算是比较早的游戏了，现在的射击游戏的自瞄实现方式和本篇所讲的会有不小的差别，但是一般通过三角函数计算实现的自瞄应该大部分原理都是本篇讲的这样，只不过使用的数据可能会有差别。比如UE4做的游戏，因为数据结构都是公开的，所以可以比较方便的得到各种信息，自瞄会更加精确。","source":"_posts/CS1-6自瞄简单分析.md","raw":"---\ntitle: CS1.6自瞄简单分析\ndate: 2018-06-12 23:08:29\ntags:\n---\n\n# 1.游戏相关信息\n\n游戏版本：Esai Cs1.6 Ver.3248\n\n显示模式：OpenGL\n\n下载地址：[《反恐精英》CS1.6 硬盘完美版](http://down.ali213.net/pcgame/CS1.6.html)\n\n\n\n<!-- more -->\n\n# 2.自瞄原理分析\n\n## 2.1 欧拉角\n\n在CS1.6中控制准心位置的数据是下面这三个：\n\n俯仰角(Pitch)、偏航角(Yaw)和滚转角(Roll)。 \n\n很多人说的鼠标的X和Y其实就是偏航角和俯仰角，偏航角控制左右移动，俯仰角控制上下移动，而滚动角一般用不到，可以先放到一边。\n\n关于欧拉角的更多知识（其实也不是很多）请参考这里：[LearnOpenGL - 欧拉角](https://learnopengl-cn.github.io/01%20Getting%20started/09%20Camera/#_6)\n\n## 2.2 世界坐标\n\n在计算角度之前我们还需要知道两组坐标，分别是自己的世界坐标和目标的世界坐标。\n\n世界坐标就是我们平常说的坐标，说白了就X、Y、Z。\n\n我下面会使用右手坐标系来讲，因为OpenGL用的也是右手坐标系。\n\n下面是右手坐标系的模型。\n\n![](http://wx2.sinaimg.cn/large/006juYZNgy1fsdzvuelrkj308306pglh.jpg)\n\n## 2.3 角度计算\n\n分别用两个二维平面来计算俯仰角和偏航角。\n\n我们以自己为原点建立坐标系，用敌人的世界坐标减去自己的世界坐标来得到相对坐标。\n\n\n\n俯仰角：\n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fsdzvy0jmvj30cg0c93yd.jpg)\n\n偏航角：\n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fsdzvwetj5j30cb0bqt8l.jpg)\n\n(图中的raw应该是yaw，懒得改了) \n\n我们可以用反正切函数arctan来算出俯仰角和偏航角，arctan对应的c函数是`atan`。但是因为`atan`的限制，在不同的象限时需要不同的处理，所以我们用`atan2`来计算。`atan2`的定义如下：\n\n![](http://wx3.sinaimg.cn/large/006juYZNgy1fsdzvrxs8bj30gz05vgm2.jpg)\n\n所以，\n\n```\npitch = atan2(deltaY, sqrt(deltaX * deltaX + deltaZ * deltaZ));\nyaw = atan2(deltaX, deltaZ);\n```\n\n需要注意的是，atan2算出来的结果是以弧度来表示的，后面需要转换成角度。\n\n\n\n# 3.代码实现\n\n## 3.1可能需要的数据\n\n这里提供一些可能会用到的数据。\n\n[mp.dll+16A470]+0x58\tCT人数\n\n[mp.dll+16A470]+0x5C\tT人数\n\ncstrike.exe+19E10C4\t\tpitch\n\ncstrike.exe+19E10C8\t\tyaw\n\ncstrike.exe+19E10CC\t\troll\n\ncstrike.exe+11544A0\t\t存放人物结构数组首地址\n\n结构大小为0x324，即可以用[cstrike.exe+11544A0]+i*0x324来获取每一个人物结构的首地址。\n\n经过调试发现i=0时的结构是空的，所以从i=1开始直到i=CT人数+T人数。\n\nZ、X、Y的偏移分别为0x88 0x8C 0x90\n\n这些数据的寻找过程挺复杂的，这里不讲。\n\n## 3.2核心代码\n\n计算角度并修改值\n\n```\n//target为目标,self为自己\ndeltaX = target.x - self.x;\ndeltaY = self.y - target.y;//在CS1.6中准心往上移时pitch减小，往下移时pitch增加，所以这里反一下。我也不知道是为什么。\ndeltaZ = target.z - self.z;\n\n//r2a为弧度转角度，这个大家可以自己写一下。\nmouse.pitch = r2a(atan2(deltaY, sqrt(deltaZ * deltaZ + deltaX * deltaX)));\nmouse.yaw = r2a(atan2(deltaX, deltaZ));\n\nWriteProcessMemory(hProcess, (LPVOID)(cstrikeAddr + 0x19E10C4), &mouse.pitch, 4, NULL);\nWriteProcessMemory(hProcess, (LPVOID)(cstrikeAddr + 0x19E10C8), &mouse.yaw, 4, NULL);\n```\n\n至于怎么选择目标，大家可以自己实现，可能会用到的数据都放在上面了。\n\n\n\n# 4.后话\n\nCS1.6算是比较早的游戏了，现在的射击游戏的自瞄实现方式和本篇所讲的会有不小的差别，但是一般通过三角函数计算实现的自瞄应该大部分原理都是本篇讲的这样，只不过使用的数据可能会有差别。比如UE4做的游戏，因为数据结构都是公开的，所以可以比较方便的得到各种信息，自瞄会更加精确。","slug":"CS1-6自瞄简单分析","published":1,"updated":"2018-06-17T03:09:59.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiynqkrt0001novzqsdlcqtx","content":"<h1 id=\"1-游戏相关信息\"><a href=\"#1-游戏相关信息\" class=\"headerlink\" title=\"1.游戏相关信息\"></a>1.游戏相关信息</h1><p>游戏版本：Esai Cs1.6 Ver.3248</p>\n<p>显示模式：OpenGL</p>\n<p>下载地址：<a href=\"http://down.ali213.net/pcgame/CS1.6.html\" target=\"_blank\" rel=\"noopener\">《反恐精英》CS1.6 硬盘完美版</a></p>\n<a id=\"more\"></a>\n<h1 id=\"2-自瞄原理分析\"><a href=\"#2-自瞄原理分析\" class=\"headerlink\" title=\"2.自瞄原理分析\"></a>2.自瞄原理分析</h1><h2 id=\"2-1-欧拉角\"><a href=\"#2-1-欧拉角\" class=\"headerlink\" title=\"2.1 欧拉角\"></a>2.1 欧拉角</h2><p>在CS1.6中控制准心位置的数据是下面这三个：</p>\n<p>俯仰角(Pitch)、偏航角(Yaw)和滚转角(Roll)。 </p>\n<p>很多人说的鼠标的X和Y其实就是偏航角和俯仰角，偏航角控制左右移动，俯仰角控制上下移动，而滚动角一般用不到，可以先放到一边。</p>\n<p>关于欧拉角的更多知识（其实也不是很多）请参考这里：<a href=\"https://learnopengl-cn.github.io/01%20Getting%20started/09%20Camera/#_6\" target=\"_blank\" rel=\"noopener\">LearnOpenGL - 欧拉角</a></p>\n<h2 id=\"2-2-世界坐标\"><a href=\"#2-2-世界坐标\" class=\"headerlink\" title=\"2.2 世界坐标\"></a>2.2 世界坐标</h2><p>在计算角度之前我们还需要知道两组坐标，分别是自己的世界坐标和目标的世界坐标。</p>\n<p>世界坐标就是我们平常说的坐标，说白了就X、Y、Z。</p>\n<p>我下面会使用右手坐标系来讲，因为OpenGL用的也是右手坐标系。</p>\n<p>下面是右手坐标系的模型。</p>\n<p><img src=\"http://wx2.sinaimg.cn/large/006juYZNgy1fsdzvuelrkj308306pglh.jpg\" alt=\"\"></p>\n<h2 id=\"2-3-角度计算\"><a href=\"#2-3-角度计算\" class=\"headerlink\" title=\"2.3 角度计算\"></a>2.3 角度计算</h2><p>分别用两个二维平面来计算俯仰角和偏航角。</p>\n<p>我们以自己为原点建立坐标系，用敌人的世界坐标减去自己的世界坐标来得到相对坐标。</p>\n<p>俯仰角：</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fsdzvy0jmvj30cg0c93yd.jpg\" alt=\"\"></p>\n<p>偏航角：</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fsdzvwetj5j30cb0bqt8l.jpg\" alt=\"\"></p>\n<p>(图中的raw应该是yaw，懒得改了) </p>\n<p>我们可以用反正切函数arctan来算出俯仰角和偏航角，arctan对应的c函数是<code>atan</code>。但是因为<code>atan</code>的限制，在不同的象限时需要不同的处理，所以我们用<code>atan2</code>来计算。<code>atan2</code>的定义如下：</p>\n<p><img src=\"http://wx3.sinaimg.cn/large/006juYZNgy1fsdzvrxs8bj30gz05vgm2.jpg\" alt=\"\"></p>\n<p>所以，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pitch = atan2(deltaY, sqrt(deltaX * deltaX + deltaZ * deltaZ));</span><br><span class=\"line\">yaw = atan2(deltaX, deltaZ);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，atan2算出来的结果是以弧度来表示的，后面需要转换成角度。</p>\n<h1 id=\"3-代码实现\"><a href=\"#3-代码实现\" class=\"headerlink\" title=\"3.代码实现\"></a>3.代码实现</h1><h2 id=\"3-1可能需要的数据\"><a href=\"#3-1可能需要的数据\" class=\"headerlink\" title=\"3.1可能需要的数据\"></a>3.1可能需要的数据</h2><p>这里提供一些可能会用到的数据。</p>\n<p>[mp.dll+16A470]+0x58    CT人数</p>\n<p>[mp.dll+16A470]+0x5C    T人数</p>\n<p>cstrike.exe+19E10C4        pitch</p>\n<p>cstrike.exe+19E10C8        yaw</p>\n<p>cstrike.exe+19E10CC        roll</p>\n<p>cstrike.exe+11544A0        存放人物结构数组首地址</p>\n<p>结构大小为0x324，即可以用[cstrike.exe+11544A0]+i*0x324来获取每一个人物结构的首地址。</p>\n<p>经过调试发现i=0时的结构是空的，所以从i=1开始直到i=CT人数+T人数。</p>\n<p>Z、X、Y的偏移分别为0x88 0x8C 0x90</p>\n<p>这些数据的寻找过程挺复杂的，这里不讲。</p>\n<h2 id=\"3-2核心代码\"><a href=\"#3-2核心代码\" class=\"headerlink\" title=\"3.2核心代码\"></a>3.2核心代码</h2><p>计算角度并修改值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//target为目标,self为自己</span><br><span class=\"line\">deltaX = target.x - self.x;</span><br><span class=\"line\">deltaY = self.y - target.y;//在CS1.6中准心往上移时pitch减小，往下移时pitch增加，所以这里反一下。我也不知道是为什么。</span><br><span class=\"line\">deltaZ = target.z - self.z;</span><br><span class=\"line\"></span><br><span class=\"line\">//r2a为弧度转角度，这个大家可以自己写一下。</span><br><span class=\"line\">mouse.pitch = r2a(atan2(deltaY, sqrt(deltaZ * deltaZ + deltaX * deltaX)));</span><br><span class=\"line\">mouse.yaw = r2a(atan2(deltaX, deltaZ));</span><br><span class=\"line\"></span><br><span class=\"line\">WriteProcessMemory(hProcess, (LPVOID)(cstrikeAddr + 0x19E10C4), &amp;mouse.pitch, 4, NULL);</span><br><span class=\"line\">WriteProcessMemory(hProcess, (LPVOID)(cstrikeAddr + 0x19E10C8), &amp;mouse.yaw, 4, NULL);</span><br></pre></td></tr></table></figure>\n<p>至于怎么选择目标，大家可以自己实现，可能会用到的数据都放在上面了。</p>\n<h1 id=\"4-后话\"><a href=\"#4-后话\" class=\"headerlink\" title=\"4.后话\"></a>4.后话</h1><p>CS1.6算是比较早的游戏了，现在的射击游戏的自瞄实现方式和本篇所讲的会有不小的差别，但是一般通过三角函数计算实现的自瞄应该大部分原理都是本篇讲的这样，只不过使用的数据可能会有差别。比如UE4做的游戏，因为数据结构都是公开的，所以可以比较方便的得到各种信息，自瞄会更加精确。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-游戏相关信息\"><a href=\"#1-游戏相关信息\" class=\"headerlink\" title=\"1.游戏相关信息\"></a>1.游戏相关信息</h1><p>游戏版本：Esai Cs1.6 Ver.3248</p>\n<p>显示模式：OpenGL</p>\n<p>下载地址：<a href=\"http://down.ali213.net/pcgame/CS1.6.html\" target=\"_blank\" rel=\"noopener\">《反恐精英》CS1.6 硬盘完美版</a></p>","more":"<h1 id=\"2-自瞄原理分析\"><a href=\"#2-自瞄原理分析\" class=\"headerlink\" title=\"2.自瞄原理分析\"></a>2.自瞄原理分析</h1><h2 id=\"2-1-欧拉角\"><a href=\"#2-1-欧拉角\" class=\"headerlink\" title=\"2.1 欧拉角\"></a>2.1 欧拉角</h2><p>在CS1.6中控制准心位置的数据是下面这三个：</p>\n<p>俯仰角(Pitch)、偏航角(Yaw)和滚转角(Roll)。 </p>\n<p>很多人说的鼠标的X和Y其实就是偏航角和俯仰角，偏航角控制左右移动，俯仰角控制上下移动，而滚动角一般用不到，可以先放到一边。</p>\n<p>关于欧拉角的更多知识（其实也不是很多）请参考这里：<a href=\"https://learnopengl-cn.github.io/01%20Getting%20started/09%20Camera/#_6\" target=\"_blank\" rel=\"noopener\">LearnOpenGL - 欧拉角</a></p>\n<h2 id=\"2-2-世界坐标\"><a href=\"#2-2-世界坐标\" class=\"headerlink\" title=\"2.2 世界坐标\"></a>2.2 世界坐标</h2><p>在计算角度之前我们还需要知道两组坐标，分别是自己的世界坐标和目标的世界坐标。</p>\n<p>世界坐标就是我们平常说的坐标，说白了就X、Y、Z。</p>\n<p>我下面会使用右手坐标系来讲，因为OpenGL用的也是右手坐标系。</p>\n<p>下面是右手坐标系的模型。</p>\n<p><img src=\"http://wx2.sinaimg.cn/large/006juYZNgy1fsdzvuelrkj308306pglh.jpg\" alt=\"\"></p>\n<h2 id=\"2-3-角度计算\"><a href=\"#2-3-角度计算\" class=\"headerlink\" title=\"2.3 角度计算\"></a>2.3 角度计算</h2><p>分别用两个二维平面来计算俯仰角和偏航角。</p>\n<p>我们以自己为原点建立坐标系，用敌人的世界坐标减去自己的世界坐标来得到相对坐标。</p>\n<p>俯仰角：</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fsdzvy0jmvj30cg0c93yd.jpg\" alt=\"\"></p>\n<p>偏航角：</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fsdzvwetj5j30cb0bqt8l.jpg\" alt=\"\"></p>\n<p>(图中的raw应该是yaw，懒得改了) </p>\n<p>我们可以用反正切函数arctan来算出俯仰角和偏航角，arctan对应的c函数是<code>atan</code>。但是因为<code>atan</code>的限制，在不同的象限时需要不同的处理，所以我们用<code>atan2</code>来计算。<code>atan2</code>的定义如下：</p>\n<p><img src=\"http://wx3.sinaimg.cn/large/006juYZNgy1fsdzvrxs8bj30gz05vgm2.jpg\" alt=\"\"></p>\n<p>所以，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pitch = atan2(deltaY, sqrt(deltaX * deltaX + deltaZ * deltaZ));</span><br><span class=\"line\">yaw = atan2(deltaX, deltaZ);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，atan2算出来的结果是以弧度来表示的，后面需要转换成角度。</p>\n<h1 id=\"3-代码实现\"><a href=\"#3-代码实现\" class=\"headerlink\" title=\"3.代码实现\"></a>3.代码实现</h1><h2 id=\"3-1可能需要的数据\"><a href=\"#3-1可能需要的数据\" class=\"headerlink\" title=\"3.1可能需要的数据\"></a>3.1可能需要的数据</h2><p>这里提供一些可能会用到的数据。</p>\n<p>[mp.dll+16A470]+0x58    CT人数</p>\n<p>[mp.dll+16A470]+0x5C    T人数</p>\n<p>cstrike.exe+19E10C4        pitch</p>\n<p>cstrike.exe+19E10C8        yaw</p>\n<p>cstrike.exe+19E10CC        roll</p>\n<p>cstrike.exe+11544A0        存放人物结构数组首地址</p>\n<p>结构大小为0x324，即可以用[cstrike.exe+11544A0]+i*0x324来获取每一个人物结构的首地址。</p>\n<p>经过调试发现i=0时的结构是空的，所以从i=1开始直到i=CT人数+T人数。</p>\n<p>Z、X、Y的偏移分别为0x88 0x8C 0x90</p>\n<p>这些数据的寻找过程挺复杂的，这里不讲。</p>\n<h2 id=\"3-2核心代码\"><a href=\"#3-2核心代码\" class=\"headerlink\" title=\"3.2核心代码\"></a>3.2核心代码</h2><p>计算角度并修改值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//target为目标,self为自己</span><br><span class=\"line\">deltaX = target.x - self.x;</span><br><span class=\"line\">deltaY = self.y - target.y;//在CS1.6中准心往上移时pitch减小，往下移时pitch增加，所以这里反一下。我也不知道是为什么。</span><br><span class=\"line\">deltaZ = target.z - self.z;</span><br><span class=\"line\"></span><br><span class=\"line\">//r2a为弧度转角度，这个大家可以自己写一下。</span><br><span class=\"line\">mouse.pitch = r2a(atan2(deltaY, sqrt(deltaZ * deltaZ + deltaX * deltaX)));</span><br><span class=\"line\">mouse.yaw = r2a(atan2(deltaX, deltaZ));</span><br><span class=\"line\"></span><br><span class=\"line\">WriteProcessMemory(hProcess, (LPVOID)(cstrikeAddr + 0x19E10C4), &amp;mouse.pitch, 4, NULL);</span><br><span class=\"line\">WriteProcessMemory(hProcess, (LPVOID)(cstrikeAddr + 0x19E10C8), &amp;mouse.yaw, 4, NULL);</span><br></pre></td></tr></table></figure>\n<p>至于怎么选择目标，大家可以自己实现，可能会用到的数据都放在上面了。</p>\n<h1 id=\"4-后话\"><a href=\"#4-后话\" class=\"headerlink\" title=\"4.后话\"></a>4.后话</h1><p>CS1.6算是比较早的游戏了，现在的射击游戏的自瞄实现方式和本篇所讲的会有不小的差别，但是一般通过三角函数计算实现的自瞄应该大部分原理都是本篇讲的这样，只不过使用的数据可能会有差别。比如UE4做的游戏，因为数据结构都是公开的，所以可以比较方便的得到各种信息，自瞄会更加精确。</p>"},{"title":"对LuaJIT制作的游戏的简单修改（一）","date":"2018-06-11T15:40:27.000Z","_content":"\n# 前言\n\n本次修改的游戏是一个使用了LuaJIT制作的梦幻西游类单机游戏，名字叫做[《梦战：碧海旭梦》](http://dream.supmers.com/forum.php?mod=viewthread&tid=20)。 这个游戏在我的硬盘里放了有很长一段时间了，当时水平有限，就没有再修改，直到这几天才重新开始研究。 网上关于LuaJIT的分析资料并不多，而有关单机游戏修改的是没有了，所以我基本上是从零开始研究。 经过几天不断的研究，终于对LuaJIT有了一点点了解，也找到了一些修改的方法。 不过说实话研究这个东西没什么用处，纯粹是我的兴趣，各位姑且看看就好。 因为我也是新手，所以文章中难免有很多错误，如果发现错误请一定要告诉我。\n\n\n\n<!-- more -->\n\n# 什么是Lua？和LuaJIT有什么关系?\n\nLua是一个脚本语言，通常是用来嵌入应用程序中的，在游戏中的应用范围也很广，尤其是手游。\n\n而LuaJIT则是Lua的一个高效版本。\n\n [用好Lua+Unity，让性能飞起来—LuaJIT性能坑详解](https://blog.uwa4d.com/archives/usparkle_luajit.html) 这篇文章对LuaJIT的工作原理有了一定的阐述。 若想了解更多，可以去官方网站看看。\n\n Lua：[The Programming Language Lua](http://www.lua.org/)\n\n LuaJIT：[The LuaJIT Project](http://luajit.org/)  \n\n\n\n# LuaJIT的字节码和虚拟机\n\nLuaJIT可以把.lua脚本编译成字节码，然后放到虚拟机中运行。这里的字节码和我们平常看到的机器码不同，LuaJIT的字节码有自己对应的一套指令， 然后在程序中有一块地方负责解释这些字节码（在windows上就是个dll）， 这块地方就是LuaJIT虚拟机。 关于LuaJIT的指令网上已经有人总结，[Lua LuaJit 指令表(整理)](https://blog.csdn.net/zzz3265/article/details/41146569)。 也可以直接翻阅LuaJIT的源码（官网可以下载），在lj_bc.h中有定义。 官网的wiki中也有文档，[LuaJIT 2.0 Bytecode Instructions](http://wiki.luajit.org/Bytecode-2.0)。 如果有人有改过Lua的游戏就知道非常难改，因为到处都是“共用代码”。 而这里的“共用代码”实际上就是虚拟机，我们直接修改机器码就等于破坏了虚拟机，所以我们要从字节码下手。 \n\n\n\n# 开始修改\n\n首先我们先研究一下跟游戏目录下的文件，在游戏目录中有个lua51.dll，我们随便拿一个PE工具看一下。 这里我用ExeinfoPe查看\n\n![](http://wx3.sinaimg.cn/large/006juYZNgy1fse09228naj30hz08udjs.jpg)\n\ndll文件被加壳了，但是问题不大，只是个压缩壳，不脱也没关系。 \n\n\n\n点击PE查看导出表信息，发现LuaJIT字样，基本上就确定游戏跟LuaJIT有关系了。 \n\n![](http://wx4.sinaimg.cn/large/006juYZNgy1fse094hagej31960fuqgg.jpg)\n\n\n\n第一次进入游戏要过一段剧情，等待游戏正式开始就好。 注意，修改前请先备份存档，游戏有反修改机制，被检测到后直接杀掉存档。（存档文件为save.bhs） 我们尝试修改一下潜力点 \n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fse097ev1hj30ru0lrb29.jpg)\n\n\n\nLuaJIT中的数据都是double类型的，所以我们用double类型来搜索，并找出是什么修改了这个地址。 \n\n![](http://wx2.sinaimg.cn/large/006juYZNgy1fse09a890aj31420q3h86.jpg)\n\n其实如果只是为了自己玩游戏的话这里就直接改数值就好了，只要不改太高游戏的反修改检测都不会杀掉你的存档，但是今天主要是研究一下LuaJIT。 这里出现了两条代码，看第一条就行了。记下代码的地址和潜力点的地址，转到x32dbg或者OD中分析，这里我用x32dbg来分析。 \n\n\n\nCtrl+G输入6B52F6AF来到该代码处，下F2断点，然后发现游戏马上就被断下来了，这很正常，因为这里的代码就是用来解释字节码的虚拟机，在lua51.dll中。 我们切换到断点页面，选中刚才下的断点，按Ctrl+E来编辑设置断点条件 \n\n![](http://wx3.sinaimg.cn/large/006juYZNgy1fse09c9rvcj31730cd403.jpg)\n\n这里的ecx == 0x0DD35300 意思就是在ecx等于这个数值的时候才断下，而这里的0DD35300就是我们刚才搜到的潜力点的地址。 \n\n\n\n点击保存后开启断点然后重新运行游戏，发现游戏会变得很卡，这也很正常，因为这里是虚拟机，执行的次数很多，调试器在筛选的时候难免会卡。 随便把某个属性加一点使潜能点改变，游戏就会被断下来，切回到调试器中查看。 这时候的esi值就是指向当前解释的字节码的地址，我们右键点击esi寄存器选择“在内存窗口中转到”，并观察左下角内存窗口。 \n\n![](http://wx2.sinaimg.cn/large/006juYZNgy1fse0a0ssk3j30gj06fjro.jpg)\n\n04B36748就是当前esi的值\n\n这里就是LuaJIT的字节码，每条指令的长度都是4个字节。 注意这里的04B36748的指令是下一条要执行的指令， 实际上改变潜力点的指令在前面04B36744处，对应的字节码就是3A 07 07 06， 顺便再注意下04B36740处的1F 07 05 07 我们查一下指令表（前面有），看看这些是什么东西。 \n\n![](http://wx4.sinaimg.cn/large/006juYZNgy1fse0a3m8bgj30hn01g3ya.jpg)\n\n![](http://wx4.sinaimg.cn/large/006juYZNgy1fse0a60ec7j30h801g742.jpg)\n\n看到之后是不是感觉蒙了，一开始我也是蒙的，后来经过不断的研究发现这里的07 05 07 或者 07 07 06其实是索引， 对应的是LuaJIT栈上的一些东西，这里我就不详细讨论了，主要是我也不太懂。 这两行大概意思就是两个变量相减，然后结果赋值给另一个变量（也就是潜力点）。 这些东西需要自己去写一些LuaJIT的简单程序，然后去调试看内存，再看看LuaJIT对应的源码才能搞清楚一点。 我也读不透LuaJIT的源码，这里我就简单讲一下怎么改就好了。 查看指令表发现这样一条指令，可以直接对变量赋值。 \n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fse0a7ugvsj30m9028t8j.jpg)\n\n那我们只要修改1F 07 05 07就好了，比如我们要把潜力点变成10000，就改成27 07 10 27 （注意小端序，10 27就是10000的16进制） 看一下效果\n\n![](http://wx3.sinaimg.cn/large/006juYZNgy1fse0ab7lsuj30pr0mk43r.jpg)\n\n![](http://wx2.sinaimg.cn/large/006juYZNgy1fse0aulw77g30zy0ljb29.gif)\n\n修改成功，想要做成修改器也方便，只要搜一下字节码再改就好了，和aobscan是差不多的 \n\n\n\n# 后记\n\n这游戏还有一些反修改还没有处理，可能会出二，也可能不会。 有关LuaJIT的知识还有很多，我这里讲的只占了很少，当作是抛砖引玉了，有兴趣的可以深入研究，有问题也可以在群里找我，当然我不一定能解答就是了。  ","source":"_posts/对LuaJIT制作的游戏的简单修改（一）.md","raw":"---\ntitle: 对LuaJIT制作的游戏的简单修改（一）\ndate: 2018-06-11 23:40:27\n---\n\n# 前言\n\n本次修改的游戏是一个使用了LuaJIT制作的梦幻西游类单机游戏，名字叫做[《梦战：碧海旭梦》](http://dream.supmers.com/forum.php?mod=viewthread&tid=20)。 这个游戏在我的硬盘里放了有很长一段时间了，当时水平有限，就没有再修改，直到这几天才重新开始研究。 网上关于LuaJIT的分析资料并不多，而有关单机游戏修改的是没有了，所以我基本上是从零开始研究。 经过几天不断的研究，终于对LuaJIT有了一点点了解，也找到了一些修改的方法。 不过说实话研究这个东西没什么用处，纯粹是我的兴趣，各位姑且看看就好。 因为我也是新手，所以文章中难免有很多错误，如果发现错误请一定要告诉我。\n\n\n\n<!-- more -->\n\n# 什么是Lua？和LuaJIT有什么关系?\n\nLua是一个脚本语言，通常是用来嵌入应用程序中的，在游戏中的应用范围也很广，尤其是手游。\n\n而LuaJIT则是Lua的一个高效版本。\n\n [用好Lua+Unity，让性能飞起来—LuaJIT性能坑详解](https://blog.uwa4d.com/archives/usparkle_luajit.html) 这篇文章对LuaJIT的工作原理有了一定的阐述。 若想了解更多，可以去官方网站看看。\n\n Lua：[The Programming Language Lua](http://www.lua.org/)\n\n LuaJIT：[The LuaJIT Project](http://luajit.org/)  \n\n\n\n# LuaJIT的字节码和虚拟机\n\nLuaJIT可以把.lua脚本编译成字节码，然后放到虚拟机中运行。这里的字节码和我们平常看到的机器码不同，LuaJIT的字节码有自己对应的一套指令， 然后在程序中有一块地方负责解释这些字节码（在windows上就是个dll）， 这块地方就是LuaJIT虚拟机。 关于LuaJIT的指令网上已经有人总结，[Lua LuaJit 指令表(整理)](https://blog.csdn.net/zzz3265/article/details/41146569)。 也可以直接翻阅LuaJIT的源码（官网可以下载），在lj_bc.h中有定义。 官网的wiki中也有文档，[LuaJIT 2.0 Bytecode Instructions](http://wiki.luajit.org/Bytecode-2.0)。 如果有人有改过Lua的游戏就知道非常难改，因为到处都是“共用代码”。 而这里的“共用代码”实际上就是虚拟机，我们直接修改机器码就等于破坏了虚拟机，所以我们要从字节码下手。 \n\n\n\n# 开始修改\n\n首先我们先研究一下跟游戏目录下的文件，在游戏目录中有个lua51.dll，我们随便拿一个PE工具看一下。 这里我用ExeinfoPe查看\n\n![](http://wx3.sinaimg.cn/large/006juYZNgy1fse09228naj30hz08udjs.jpg)\n\ndll文件被加壳了，但是问题不大，只是个压缩壳，不脱也没关系。 \n\n\n\n点击PE查看导出表信息，发现LuaJIT字样，基本上就确定游戏跟LuaJIT有关系了。 \n\n![](http://wx4.sinaimg.cn/large/006juYZNgy1fse094hagej31960fuqgg.jpg)\n\n\n\n第一次进入游戏要过一段剧情，等待游戏正式开始就好。 注意，修改前请先备份存档，游戏有反修改机制，被检测到后直接杀掉存档。（存档文件为save.bhs） 我们尝试修改一下潜力点 \n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fse097ev1hj30ru0lrb29.jpg)\n\n\n\nLuaJIT中的数据都是double类型的，所以我们用double类型来搜索，并找出是什么修改了这个地址。 \n\n![](http://wx2.sinaimg.cn/large/006juYZNgy1fse09a890aj31420q3h86.jpg)\n\n其实如果只是为了自己玩游戏的话这里就直接改数值就好了，只要不改太高游戏的反修改检测都不会杀掉你的存档，但是今天主要是研究一下LuaJIT。 这里出现了两条代码，看第一条就行了。记下代码的地址和潜力点的地址，转到x32dbg或者OD中分析，这里我用x32dbg来分析。 \n\n\n\nCtrl+G输入6B52F6AF来到该代码处，下F2断点，然后发现游戏马上就被断下来了，这很正常，因为这里的代码就是用来解释字节码的虚拟机，在lua51.dll中。 我们切换到断点页面，选中刚才下的断点，按Ctrl+E来编辑设置断点条件 \n\n![](http://wx3.sinaimg.cn/large/006juYZNgy1fse09c9rvcj31730cd403.jpg)\n\n这里的ecx == 0x0DD35300 意思就是在ecx等于这个数值的时候才断下，而这里的0DD35300就是我们刚才搜到的潜力点的地址。 \n\n\n\n点击保存后开启断点然后重新运行游戏，发现游戏会变得很卡，这也很正常，因为这里是虚拟机，执行的次数很多，调试器在筛选的时候难免会卡。 随便把某个属性加一点使潜能点改变，游戏就会被断下来，切回到调试器中查看。 这时候的esi值就是指向当前解释的字节码的地址，我们右键点击esi寄存器选择“在内存窗口中转到”，并观察左下角内存窗口。 \n\n![](http://wx2.sinaimg.cn/large/006juYZNgy1fse0a0ssk3j30gj06fjro.jpg)\n\n04B36748就是当前esi的值\n\n这里就是LuaJIT的字节码，每条指令的长度都是4个字节。 注意这里的04B36748的指令是下一条要执行的指令， 实际上改变潜力点的指令在前面04B36744处，对应的字节码就是3A 07 07 06， 顺便再注意下04B36740处的1F 07 05 07 我们查一下指令表（前面有），看看这些是什么东西。 \n\n![](http://wx4.sinaimg.cn/large/006juYZNgy1fse0a3m8bgj30hn01g3ya.jpg)\n\n![](http://wx4.sinaimg.cn/large/006juYZNgy1fse0a60ec7j30h801g742.jpg)\n\n看到之后是不是感觉蒙了，一开始我也是蒙的，后来经过不断的研究发现这里的07 05 07 或者 07 07 06其实是索引， 对应的是LuaJIT栈上的一些东西，这里我就不详细讨论了，主要是我也不太懂。 这两行大概意思就是两个变量相减，然后结果赋值给另一个变量（也就是潜力点）。 这些东西需要自己去写一些LuaJIT的简单程序，然后去调试看内存，再看看LuaJIT对应的源码才能搞清楚一点。 我也读不透LuaJIT的源码，这里我就简单讲一下怎么改就好了。 查看指令表发现这样一条指令，可以直接对变量赋值。 \n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fse0a7ugvsj30m9028t8j.jpg)\n\n那我们只要修改1F 07 05 07就好了，比如我们要把潜力点变成10000，就改成27 07 10 27 （注意小端序，10 27就是10000的16进制） 看一下效果\n\n![](http://wx3.sinaimg.cn/large/006juYZNgy1fse0ab7lsuj30pr0mk43r.jpg)\n\n![](http://wx2.sinaimg.cn/large/006juYZNgy1fse0aulw77g30zy0ljb29.gif)\n\n修改成功，想要做成修改器也方便，只要搜一下字节码再改就好了，和aobscan是差不多的 \n\n\n\n# 后记\n\n这游戏还有一些反修改还没有处理，可能会出二，也可能不会。 有关LuaJIT的知识还有很多，我这里讲的只占了很少，当作是抛砖引玉了，有兴趣的可以深入研究，有问题也可以在群里找我，当然我不一定能解答就是了。  ","slug":"对LuaJIT制作的游戏的简单修改（一）","published":1,"updated":"2018-06-17T03:22:28.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiynqkrv0002novztce9atqx","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本次修改的游戏是一个使用了LuaJIT制作的梦幻西游类单机游戏，名字叫做<a href=\"http://dream.supmers.com/forum.php?mod=viewthread&amp;tid=20\" target=\"_blank\" rel=\"noopener\">《梦战：碧海旭梦》</a>。 这个游戏在我的硬盘里放了有很长一段时间了，当时水平有限，就没有再修改，直到这几天才重新开始研究。 网上关于LuaJIT的分析资料并不多，而有关单机游戏修改的是没有了，所以我基本上是从零开始研究。 经过几天不断的研究，终于对LuaJIT有了一点点了解，也找到了一些修改的方法。 不过说实话研究这个东西没什么用处，纯粹是我的兴趣，各位姑且看看就好。 因为我也是新手，所以文章中难免有很多错误，如果发现错误请一定要告诉我。</p>\n<a id=\"more\"></a>\n<h1 id=\"什么是Lua？和LuaJIT有什么关系\"><a href=\"#什么是Lua？和LuaJIT有什么关系\" class=\"headerlink\" title=\"什么是Lua？和LuaJIT有什么关系?\"></a>什么是Lua？和LuaJIT有什么关系?</h1><p>Lua是一个脚本语言，通常是用来嵌入应用程序中的，在游戏中的应用范围也很广，尤其是手游。</p>\n<p>而LuaJIT则是Lua的一个高效版本。</p>\n<p> <a href=\"https://blog.uwa4d.com/archives/usparkle_luajit.html\" target=\"_blank\" rel=\"noopener\">用好Lua+Unity，让性能飞起来—LuaJIT性能坑详解</a> 这篇文章对LuaJIT的工作原理有了一定的阐述。 若想了解更多，可以去官方网站看看。</p>\n<p> Lua：<a href=\"http://www.lua.org/\" target=\"_blank\" rel=\"noopener\">The Programming Language Lua</a></p>\n<p> LuaJIT：<a href=\"http://luajit.org/\" target=\"_blank\" rel=\"noopener\">The LuaJIT Project</a>  </p>\n<h1 id=\"LuaJIT的字节码和虚拟机\"><a href=\"#LuaJIT的字节码和虚拟机\" class=\"headerlink\" title=\"LuaJIT的字节码和虚拟机\"></a>LuaJIT的字节码和虚拟机</h1><p>LuaJIT可以把.lua脚本编译成字节码，然后放到虚拟机中运行。这里的字节码和我们平常看到的机器码不同，LuaJIT的字节码有自己对应的一套指令， 然后在程序中有一块地方负责解释这些字节码（在windows上就是个dll）， 这块地方就是LuaJIT虚拟机。 关于LuaJIT的指令网上已经有人总结，<a href=\"https://blog.csdn.net/zzz3265/article/details/41146569\" target=\"_blank\" rel=\"noopener\">Lua LuaJit 指令表(整理)</a>。 也可以直接翻阅LuaJIT的源码（官网可以下载），在lj_bc.h中有定义。 官网的wiki中也有文档，<a href=\"http://wiki.luajit.org/Bytecode-2.0\" target=\"_blank\" rel=\"noopener\">LuaJIT 2.0 Bytecode Instructions</a>。 如果有人有改过Lua的游戏就知道非常难改，因为到处都是“共用代码”。 而这里的“共用代码”实际上就是虚拟机，我们直接修改机器码就等于破坏了虚拟机，所以我们要从字节码下手。 </p>\n<h1 id=\"开始修改\"><a href=\"#开始修改\" class=\"headerlink\" title=\"开始修改\"></a>开始修改</h1><p>首先我们先研究一下跟游戏目录下的文件，在游戏目录中有个lua51.dll，我们随便拿一个PE工具看一下。 这里我用ExeinfoPe查看</p>\n<p><img src=\"http://wx3.sinaimg.cn/large/006juYZNgy1fse09228naj30hz08udjs.jpg\" alt=\"\"></p>\n<p>dll文件被加壳了，但是问题不大，只是个压缩壳，不脱也没关系。 </p>\n<p>点击PE查看导出表信息，发现LuaJIT字样，基本上就确定游戏跟LuaJIT有关系了。 </p>\n<p><img src=\"http://wx4.sinaimg.cn/large/006juYZNgy1fse094hagej31960fuqgg.jpg\" alt=\"\"></p>\n<p>第一次进入游戏要过一段剧情，等待游戏正式开始就好。 注意，修改前请先备份存档，游戏有反修改机制，被检测到后直接杀掉存档。（存档文件为save.bhs） 我们尝试修改一下潜力点 </p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fse097ev1hj30ru0lrb29.jpg\" alt=\"\"></p>\n<p>LuaJIT中的数据都是double类型的，所以我们用double类型来搜索，并找出是什么修改了这个地址。 </p>\n<p><img src=\"http://wx2.sinaimg.cn/large/006juYZNgy1fse09a890aj31420q3h86.jpg\" alt=\"\"></p>\n<p>其实如果只是为了自己玩游戏的话这里就直接改数值就好了，只要不改太高游戏的反修改检测都不会杀掉你的存档，但是今天主要是研究一下LuaJIT。 这里出现了两条代码，看第一条就行了。记下代码的地址和潜力点的地址，转到x32dbg或者OD中分析，这里我用x32dbg来分析。 </p>\n<p>Ctrl+G输入6B52F6AF来到该代码处，下F2断点，然后发现游戏马上就被断下来了，这很正常，因为这里的代码就是用来解释字节码的虚拟机，在lua51.dll中。 我们切换到断点页面，选中刚才下的断点，按Ctrl+E来编辑设置断点条件 </p>\n<p><img src=\"http://wx3.sinaimg.cn/large/006juYZNgy1fse09c9rvcj31730cd403.jpg\" alt=\"\"></p>\n<p>这里的ecx == 0x0DD35300 意思就是在ecx等于这个数值的时候才断下，而这里的0DD35300就是我们刚才搜到的潜力点的地址。 </p>\n<p>点击保存后开启断点然后重新运行游戏，发现游戏会变得很卡，这也很正常，因为这里是虚拟机，执行的次数很多，调试器在筛选的时候难免会卡。 随便把某个属性加一点使潜能点改变，游戏就会被断下来，切回到调试器中查看。 这时候的esi值就是指向当前解释的字节码的地址，我们右键点击esi寄存器选择“在内存窗口中转到”，并观察左下角内存窗口。 </p>\n<p><img src=\"http://wx2.sinaimg.cn/large/006juYZNgy1fse0a0ssk3j30gj06fjro.jpg\" alt=\"\"></p>\n<p>04B36748就是当前esi的值</p>\n<p>这里就是LuaJIT的字节码，每条指令的长度都是4个字节。 注意这里的04B36748的指令是下一条要执行的指令， 实际上改变潜力点的指令在前面04B36744处，对应的字节码就是3A 07 07 06， 顺便再注意下04B36740处的1F 07 05 07 我们查一下指令表（前面有），看看这些是什么东西。 </p>\n<p><img src=\"http://wx4.sinaimg.cn/large/006juYZNgy1fse0a3m8bgj30hn01g3ya.jpg\" alt=\"\"></p>\n<p><img src=\"http://wx4.sinaimg.cn/large/006juYZNgy1fse0a60ec7j30h801g742.jpg\" alt=\"\"></p>\n<p>看到之后是不是感觉蒙了，一开始我也是蒙的，后来经过不断的研究发现这里的07 05 07 或者 07 07 06其实是索引， 对应的是LuaJIT栈上的一些东西，这里我就不详细讨论了，主要是我也不太懂。 这两行大概意思就是两个变量相减，然后结果赋值给另一个变量（也就是潜力点）。 这些东西需要自己去写一些LuaJIT的简单程序，然后去调试看内存，再看看LuaJIT对应的源码才能搞清楚一点。 我也读不透LuaJIT的源码，这里我就简单讲一下怎么改就好了。 查看指令表发现这样一条指令，可以直接对变量赋值。 </p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fse0a7ugvsj30m9028t8j.jpg\" alt=\"\"></p>\n<p>那我们只要修改1F 07 05 07就好了，比如我们要把潜力点变成10000，就改成27 07 10 27 （注意小端序，10 27就是10000的16进制） 看一下效果</p>\n<p><img src=\"http://wx3.sinaimg.cn/large/006juYZNgy1fse0ab7lsuj30pr0mk43r.jpg\" alt=\"\"></p>\n<p><img src=\"http://wx2.sinaimg.cn/large/006juYZNgy1fse0aulw77g30zy0ljb29.gif\" alt=\"\"></p>\n<p>修改成功，想要做成修改器也方便，只要搜一下字节码再改就好了，和aobscan是差不多的 </p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>这游戏还有一些反修改还没有处理，可能会出二，也可能不会。 有关LuaJIT的知识还有很多，我这里讲的只占了很少，当作是抛砖引玉了，有兴趣的可以深入研究，有问题也可以在群里找我，当然我不一定能解答就是了。  </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本次修改的游戏是一个使用了LuaJIT制作的梦幻西游类单机游戏，名字叫做<a href=\"http://dream.supmers.com/forum.php?mod=viewthread&amp;tid=20\" target=\"_blank\" rel=\"noopener\">《梦战：碧海旭梦》</a>。 这个游戏在我的硬盘里放了有很长一段时间了，当时水平有限，就没有再修改，直到这几天才重新开始研究。 网上关于LuaJIT的分析资料并不多，而有关单机游戏修改的是没有了，所以我基本上是从零开始研究。 经过几天不断的研究，终于对LuaJIT有了一点点了解，也找到了一些修改的方法。 不过说实话研究这个东西没什么用处，纯粹是我的兴趣，各位姑且看看就好。 因为我也是新手，所以文章中难免有很多错误，如果发现错误请一定要告诉我。</p>","more":"<h1 id=\"什么是Lua？和LuaJIT有什么关系\"><a href=\"#什么是Lua？和LuaJIT有什么关系\" class=\"headerlink\" title=\"什么是Lua？和LuaJIT有什么关系?\"></a>什么是Lua？和LuaJIT有什么关系?</h1><p>Lua是一个脚本语言，通常是用来嵌入应用程序中的，在游戏中的应用范围也很广，尤其是手游。</p>\n<p>而LuaJIT则是Lua的一个高效版本。</p>\n<p> <a href=\"https://blog.uwa4d.com/archives/usparkle_luajit.html\" target=\"_blank\" rel=\"noopener\">用好Lua+Unity，让性能飞起来—LuaJIT性能坑详解</a> 这篇文章对LuaJIT的工作原理有了一定的阐述。 若想了解更多，可以去官方网站看看。</p>\n<p> Lua：<a href=\"http://www.lua.org/\" target=\"_blank\" rel=\"noopener\">The Programming Language Lua</a></p>\n<p> LuaJIT：<a href=\"http://luajit.org/\" target=\"_blank\" rel=\"noopener\">The LuaJIT Project</a>  </p>\n<h1 id=\"LuaJIT的字节码和虚拟机\"><a href=\"#LuaJIT的字节码和虚拟机\" class=\"headerlink\" title=\"LuaJIT的字节码和虚拟机\"></a>LuaJIT的字节码和虚拟机</h1><p>LuaJIT可以把.lua脚本编译成字节码，然后放到虚拟机中运行。这里的字节码和我们平常看到的机器码不同，LuaJIT的字节码有自己对应的一套指令， 然后在程序中有一块地方负责解释这些字节码（在windows上就是个dll）， 这块地方就是LuaJIT虚拟机。 关于LuaJIT的指令网上已经有人总结，<a href=\"https://blog.csdn.net/zzz3265/article/details/41146569\" target=\"_blank\" rel=\"noopener\">Lua LuaJit 指令表(整理)</a>。 也可以直接翻阅LuaJIT的源码（官网可以下载），在lj_bc.h中有定义。 官网的wiki中也有文档，<a href=\"http://wiki.luajit.org/Bytecode-2.0\" target=\"_blank\" rel=\"noopener\">LuaJIT 2.0 Bytecode Instructions</a>。 如果有人有改过Lua的游戏就知道非常难改，因为到处都是“共用代码”。 而这里的“共用代码”实际上就是虚拟机，我们直接修改机器码就等于破坏了虚拟机，所以我们要从字节码下手。 </p>\n<h1 id=\"开始修改\"><a href=\"#开始修改\" class=\"headerlink\" title=\"开始修改\"></a>开始修改</h1><p>首先我们先研究一下跟游戏目录下的文件，在游戏目录中有个lua51.dll，我们随便拿一个PE工具看一下。 这里我用ExeinfoPe查看</p>\n<p><img src=\"http://wx3.sinaimg.cn/large/006juYZNgy1fse09228naj30hz08udjs.jpg\" alt=\"\"></p>\n<p>dll文件被加壳了，但是问题不大，只是个压缩壳，不脱也没关系。 </p>\n<p>点击PE查看导出表信息，发现LuaJIT字样，基本上就确定游戏跟LuaJIT有关系了。 </p>\n<p><img src=\"http://wx4.sinaimg.cn/large/006juYZNgy1fse094hagej31960fuqgg.jpg\" alt=\"\"></p>\n<p>第一次进入游戏要过一段剧情，等待游戏正式开始就好。 注意，修改前请先备份存档，游戏有反修改机制，被检测到后直接杀掉存档。（存档文件为save.bhs） 我们尝试修改一下潜力点 </p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fse097ev1hj30ru0lrb29.jpg\" alt=\"\"></p>\n<p>LuaJIT中的数据都是double类型的，所以我们用double类型来搜索，并找出是什么修改了这个地址。 </p>\n<p><img src=\"http://wx2.sinaimg.cn/large/006juYZNgy1fse09a890aj31420q3h86.jpg\" alt=\"\"></p>\n<p>其实如果只是为了自己玩游戏的话这里就直接改数值就好了，只要不改太高游戏的反修改检测都不会杀掉你的存档，但是今天主要是研究一下LuaJIT。 这里出现了两条代码，看第一条就行了。记下代码的地址和潜力点的地址，转到x32dbg或者OD中分析，这里我用x32dbg来分析。 </p>\n<p>Ctrl+G输入6B52F6AF来到该代码处，下F2断点，然后发现游戏马上就被断下来了，这很正常，因为这里的代码就是用来解释字节码的虚拟机，在lua51.dll中。 我们切换到断点页面，选中刚才下的断点，按Ctrl+E来编辑设置断点条件 </p>\n<p><img src=\"http://wx3.sinaimg.cn/large/006juYZNgy1fse09c9rvcj31730cd403.jpg\" alt=\"\"></p>\n<p>这里的ecx == 0x0DD35300 意思就是在ecx等于这个数值的时候才断下，而这里的0DD35300就是我们刚才搜到的潜力点的地址。 </p>\n<p>点击保存后开启断点然后重新运行游戏，发现游戏会变得很卡，这也很正常，因为这里是虚拟机，执行的次数很多，调试器在筛选的时候难免会卡。 随便把某个属性加一点使潜能点改变，游戏就会被断下来，切回到调试器中查看。 这时候的esi值就是指向当前解释的字节码的地址，我们右键点击esi寄存器选择“在内存窗口中转到”，并观察左下角内存窗口。 </p>\n<p><img src=\"http://wx2.sinaimg.cn/large/006juYZNgy1fse0a0ssk3j30gj06fjro.jpg\" alt=\"\"></p>\n<p>04B36748就是当前esi的值</p>\n<p>这里就是LuaJIT的字节码，每条指令的长度都是4个字节。 注意这里的04B36748的指令是下一条要执行的指令， 实际上改变潜力点的指令在前面04B36744处，对应的字节码就是3A 07 07 06， 顺便再注意下04B36740处的1F 07 05 07 我们查一下指令表（前面有），看看这些是什么东西。 </p>\n<p><img src=\"http://wx4.sinaimg.cn/large/006juYZNgy1fse0a3m8bgj30hn01g3ya.jpg\" alt=\"\"></p>\n<p><img src=\"http://wx4.sinaimg.cn/large/006juYZNgy1fse0a60ec7j30h801g742.jpg\" alt=\"\"></p>\n<p>看到之后是不是感觉蒙了，一开始我也是蒙的，后来经过不断的研究发现这里的07 05 07 或者 07 07 06其实是索引， 对应的是LuaJIT栈上的一些东西，这里我就不详细讨论了，主要是我也不太懂。 这两行大概意思就是两个变量相减，然后结果赋值给另一个变量（也就是潜力点）。 这些东西需要自己去写一些LuaJIT的简单程序，然后去调试看内存，再看看LuaJIT对应的源码才能搞清楚一点。 我也读不透LuaJIT的源码，这里我就简单讲一下怎么改就好了。 查看指令表发现这样一条指令，可以直接对变量赋值。 </p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fse0a7ugvsj30m9028t8j.jpg\" alt=\"\"></p>\n<p>那我们只要修改1F 07 05 07就好了，比如我们要把潜力点变成10000，就改成27 07 10 27 （注意小端序，10 27就是10000的16进制） 看一下效果</p>\n<p><img src=\"http://wx3.sinaimg.cn/large/006juYZNgy1fse0ab7lsuj30pr0mk43r.jpg\" alt=\"\"></p>\n<p><img src=\"http://wx2.sinaimg.cn/large/006juYZNgy1fse0aulw77g30zy0ljb29.gif\" alt=\"\"></p>\n<p>修改成功，想要做成修改器也方便，只要搜一下字节码再改就好了，和aobscan是差不多的 </p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>这游戏还有一些反修改还没有处理，可能会出二，也可能不会。 有关LuaJIT的知识还有很多，我这里讲的只占了很少，当作是抛砖引玉了，有兴趣的可以深入研究，有问题也可以在群里找我，当然我不一定能解答就是了。  </p>"},{"title":"对LuaJIT制作的游戏的简单修改（二）","date":"2018-06-25T09:50:04.000Z","_content":"\n# 前言\n\n本次修改的游戏还是在（一）中所讲的游戏，这一次的目的是要把游戏的反修改处理掉。但是跟（一）中不同的是这一次用到的技术会更高级一点，直接对LuaJIT进行hook。我们可以直接使用Lua自带的debug库来获得大量的信息，并且能够进行修改。\n\n参考了国外大神的文章：\n\n[Hooking LuaJIT](https://nickcano.com/hooking-luajit/)（原文）\n\n[看我如何通过hook攻击LuaJIT](https://www.anquanke.com/post/id/86958)（译文）\n\n\n\n<!-- more -->\n\n# 注入Lua代码\n\n为了注入我们自己的Lua代码，我们需要获得游戏调用luaL_newstate返回的lua_State对象，其实就是Lua代码运行的一个环境。如国外大神的文章所说，直接hook luaL_newstate这个函数是不太妥当的，因为这时候库还没有加载，debug功能无法使用，所以可以选择hook luaL_openlibs这个函数，当然如果hook了luaL_newstate也是可以的，只需要自己手动调用一下luaL_openlibs就行。为了加载我们的代码，我们还需要得到luaL_loadfilex和lua_pcall两个函数的地址。\n\n确定了所需要hook的函数之后，接下来就是确定hook方式。一般来讲是用dll来完成我们的hook，但是注入dll的时机却是个问题。luaL_openlibs一般是在luaL_newstate之后就马上调用，而luaL_newstate一般是在程序一开始时就会调用。一开始我使用SetWindowsHookEx并且第一个参数使用WH_SHELL来注入dll，这样只要游戏创建窗口的时候我们的dll就会被注入进去，但是经过实验之后效果并不理想，因为这个游戏在创建窗口之前就已经调用了luaL_openlibs，所以我们的hook代码并没有被执行。于是我采用了第二种方法，创建进程的时候直接注入dll。为此我参考了网上的一些源码，写了一个注入工具（只支持32位）。\n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fsnnvv660pj30ga091dfs.jpg)\n\n接下来就是dll的代码\n\n```c++\ntypedef void* lua_State;\ntypedef int(*_luaL_loadfilex)(lua_State *L, const char *filename, const char *mode);\ntypedef int(*_luaL_openlibs)(lua_State *L);\ntypedef int(*_lua_pcall)(lua_State *L, int nargs, int nresults, int errfunc);\n\n_luaL_openlibs luaL_openlibs_original;\n_luaL_loadfilex luaL_loadfilex;\n_lua_pcall lua_pcall;\nBYTE orig_code[5];\nBYTE jmp_code[5] = { 0xe9 };\n\nvoid MyHook();\nvoid ChooseProc();\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n\t\tChooseProc();\n\t\tbreak;\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n\nint luaL_openlibs_hook(lua_State *L)\n{\n\tWriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &orig_code, 5, NULL);\t//恢复原函数\n\tint ret = luaL_openlibs_original(L);\n\tWriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &jmp_code, 5, NULL);\t//修改原函数\n\tluaL_loadfilex(L, \"debug.lua\", NULL) || lua_pcall(L, 0, -1, 0);\t//加载我们的lua脚本，将脚本放在游戏目录下即可\n\tMessageBox(NULL, L\"Hook success\", L\"Success\", MB_OK);\n\treturn ret;\n}\n\nvoid MyHook()\n{\n\tHMODULE hModule = GetModuleHandle(L\"lua51.dll\");\n\tif (!hModule)\n\t{\n\t\tMessageBox(NULL, L\"lua51.dll not found!\", L\"Fail\", MB_OK);\n\t\treturn;\n\t}\n\tluaL_openlibs_original = (_luaL_openlibs)GetProcAddress(hModule, \"luaL_openlibs\");\n\tluaL_loadfilex = (_luaL_loadfilex)GetProcAddress(hModule, \"luaL_loadfilex\");\n\tlua_pcall = (_lua_pcall)GetProcAddress(hModule, \"lua_pcall\");\n\tif (!luaL_openlibs_original || !luaL_loadfilex || !lua_pcall)\n\t{\n\t\tMessageBox(NULL, L\"function not found\", L\"Fail\", MB_OK);\n\t\treturn;\n\t}\n\t//保存原函数字节\n\tif (!ReadProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &orig_code, 5, NULL))\n\t{\n\t\tMessageBox(NULL, L\"ReadProcessMemory fail\", L\"Fail\", MB_OK);\n\t}\n\n\t//修改原函数\n\t*(DWORD*)(jmp_code + 1) = (DWORD)luaL_openlibs_hook - (DWORD)luaL_openlibs_original - 5;\n\tif (!WriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &jmp_code, 5, NULL))\n\t{\n\t\tMessageBox(NULL, L\"WriteProcessMemory fail\", L\"Fail\", MB_OK);\n\t}\n}\n\nvoid ChooseProc()\n{\n\tWCHAR szPath[MAX_PATH];\n\tWCHAR *p = NULL;\n\n\tGetModuleFileName(NULL, szPath, MAX_PATH);\n\tp = wcsrchr(szPath, L'\\\\');\n\t\n\tif (!wcscmp(p + 1, L\"梦战.exe\"))\t//要hook的进程名称\n\t{\n\t\tMyHook();\n\t\tMessageBox(NULL, L\"DLL inject\", L\"Success\", MB_OK);\n\t}\n}\n```\n\n代码比较丑，各种英文语法问题请见谅，看得懂就行。\n\n通过GetProcAddress就可以直接获得我们需要的三个函数的地址，其中luaL_openlibs是我们需要hook的函数，luaL_loadfilex和lua_pcall则是来加载我们写的用来debug的lua脚本。其中ChooseProc是我用SetWindowsHookEx时用来筛选注入进程的，但是因为后来用了注入工具，所以这里会显得比较多余。\n\n\n\n# debug.lua\n\n这个就是我们用来获取信息的lua脚本。参考了国外大神的代码并结合实际游戏之后，我的代码如下。\n\n```lua\n--lua无法debug即时编译过后的代码，根据实际情况选择是否关闭jit。\njit.off()\n\nfunction re_print(t,prefix,file)\n    for k,v in pairs(t) do\n        if type(v) == \"function\" then\n            file:write(string.format(\"%s => %s\",\"_G.\" .. k,v) .. \"\\n\")\n            --[[\n        else\n            file:write(prefix .. \".\" .. k .. \"\\n\")\n            --]]\n        end\n        if type(v) == \"table\" and k ~= \"_G\" and k ~= \"_G._G\" and not v.package then\n            re_print(v, \"\\t\" .. prefix .. \".\" .. k, file)\n        end\n    end\nend\n\nfunction dumpGlobals()\n    local fname = \"globals_\" .. \".txt\"\n    local globalsFile = io.open(fname, \"w\")\n\n    re_print(_G,\"_G\",globalsFile)\n\n    globalsFile:flush()\n    globalsFile:close()\nend\n\nfunction trace(event, line)\n    local info = debug.getinfo(2)\n\n    if not info then return end\n    if not info.name then return end\n    \n    dumpGlobals()\n    \n    --下面注释的代码是获取函数信息的，结合了实际情况之后我并没有使用，详情参考国外大神文章\n    --[[\n    local fname = \"trace_\" .. \".txt\"\n    local traceFile = io.open(fname, \"a\")\n    traceFile:write(info.name .. \"()\\n\")\n\n    local a = 1\n    while true do\n        local name, value = debug.getlocal(2, a)\n        if not name then break end\n        if not value then break end\n        traceFile:write(tostring(name) .. \": \" .. tostring(value) .. \"\\n\")\n        a = a + 1\n    end\n    traceFile:flush()\n    traceFile:close()\n    --]]\nend\n\ndebug.sethook(trace, \"c\")\n\n```\n\n`dumpGlobals`函数中，将名为\\_G的表打印出来并保存到游戏目录下。\\_G是Lua的全局对象表，这个表储存了很多跟游戏有关的关键信息，有很大的价值。其中`re_print`函数是我从网上参考来的一份可以遍历所有table的代码，因为我只想要获得跟函数有关的信息，所以我在其中加了一句`if type(v) == \"function\"`来筛选出\\_G表中存储的函数。\n\n`debug.sethook(trace, \"c\")`使Lua在每个函数完成之前调用`trace`这个函数，在`trace`中，我们就可以调用`dumpGlobals`了。但是因为不知道游戏什么时候会把全局变量分配完毕，所以我们只好不设限制的一直调用`dumpGlobals`。当调用脚本后，可能会比较卡，但是开启游戏后就可以马上关掉游戏了，一般来讲游戏开启后在我们没有反应过来时全局变量都已经分配好了。\n\n\n\n# 观察_G全局变量表内容\n\n我们使用工具，选择dll的路径和游戏的路径并点击执行，在开启游戏后就可以立马关闭游戏，我们可以看到游戏目录下多了个globals_.txt文件，这就是我们打印出来的全局变量表，我在里面发现了很有意思的东西。\n\n```\n...省略一大部分...\n_G.渲染函数 => function: 0x057622e0\n_G.领取沉船传信 => function: 0x02b313e8\n_G.结算保护夕仔 => function: 0x02b315c8\n_G.dofile => function: builtin#25\n_G.领取押镖任务 => function: 0x02b31430\n_G.防修改 => function: 0x0562d190\t\t\t<------防修改关键函数\n_G.是否拥有效果 => function: 0x02b314f0\n_G.取效果剩余时间 => function: 0x02b31508\n_G.洗点 => function: 0x02b31610\n_G.xpcall => function: builtin#21\n_G.领取剑指凶狼 => function: 0x02b31418\n_G.角色修炼 => function: 0x02b31568\n_G.载入视频 => function: 0x04a7ac18\n_G.置纹理过滤 => function: 0x02b406f8\n_G.停止视频 => function: 0x04a7ac78\n...省略一大部分...\n```\n\n这个游戏的Lua脚本很多都是用了中文，这个防修改就直接写脸上了，一下就看到了。知道了函数名称后我们就可以干坏事了。\n\n\n\n# debug.lua（改）\n\n这里我偷个懒，直接修改一下debug.lua内容，把防修改过掉。\n\n```\nfunction 反防修改()\n    return\nend\n\nfunction trace(event, line)\n    防修改 = 反防修改\nend\n\ndebug.sethook(trace, \"c\")\n\n```\n\n文件记得使用GBK编码格式，不然这个游戏不认文件中的汉字。\n\n我们把防修改直接替换成我们写的反防修改，反防修改是一个空函数，游戏调用防修改这个函数的时候，就相当于是在调用我们的反防修改函数，然后就是啥都没有做。将debug.lua放在游戏目录下并使用注入工具注入我们的dll就可以过掉反修改。\n\n效果图如下，\n\n没有反防修改时：\n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fsnq8cvf88g30zy0lj1l1.gif)\n\n有反防修改时：\n\n![](http://wx3.sinaimg.cn/large/006juYZNgy1fsnq8n4jyyg30zy0lj7wm.gif)\n\n当然这个方法非常的不优雅，不过因为我对Lua并不是很熟悉，所以我也没有再多研究了。\n\n\n\n# 后记\n\n其实这是个相当厉害的技术，不过本人水平有限，没办法给大家展现更多东西，有兴趣的可以自己研究研究。","source":"_posts/对LuaJIT制作的游戏的简单修改（二）.md","raw":"---\ntitle: 对LuaJIT制作的游戏的简单修改（二）\ndate: 2018-06-25 17:50:04\ntags:\n---\n\n# 前言\n\n本次修改的游戏还是在（一）中所讲的游戏，这一次的目的是要把游戏的反修改处理掉。但是跟（一）中不同的是这一次用到的技术会更高级一点，直接对LuaJIT进行hook。我们可以直接使用Lua自带的debug库来获得大量的信息，并且能够进行修改。\n\n参考了国外大神的文章：\n\n[Hooking LuaJIT](https://nickcano.com/hooking-luajit/)（原文）\n\n[看我如何通过hook攻击LuaJIT](https://www.anquanke.com/post/id/86958)（译文）\n\n\n\n<!-- more -->\n\n# 注入Lua代码\n\n为了注入我们自己的Lua代码，我们需要获得游戏调用luaL_newstate返回的lua_State对象，其实就是Lua代码运行的一个环境。如国外大神的文章所说，直接hook luaL_newstate这个函数是不太妥当的，因为这时候库还没有加载，debug功能无法使用，所以可以选择hook luaL_openlibs这个函数，当然如果hook了luaL_newstate也是可以的，只需要自己手动调用一下luaL_openlibs就行。为了加载我们的代码，我们还需要得到luaL_loadfilex和lua_pcall两个函数的地址。\n\n确定了所需要hook的函数之后，接下来就是确定hook方式。一般来讲是用dll来完成我们的hook，但是注入dll的时机却是个问题。luaL_openlibs一般是在luaL_newstate之后就马上调用，而luaL_newstate一般是在程序一开始时就会调用。一开始我使用SetWindowsHookEx并且第一个参数使用WH_SHELL来注入dll，这样只要游戏创建窗口的时候我们的dll就会被注入进去，但是经过实验之后效果并不理想，因为这个游戏在创建窗口之前就已经调用了luaL_openlibs，所以我们的hook代码并没有被执行。于是我采用了第二种方法，创建进程的时候直接注入dll。为此我参考了网上的一些源码，写了一个注入工具（只支持32位）。\n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fsnnvv660pj30ga091dfs.jpg)\n\n接下来就是dll的代码\n\n```c++\ntypedef void* lua_State;\ntypedef int(*_luaL_loadfilex)(lua_State *L, const char *filename, const char *mode);\ntypedef int(*_luaL_openlibs)(lua_State *L);\ntypedef int(*_lua_pcall)(lua_State *L, int nargs, int nresults, int errfunc);\n\n_luaL_openlibs luaL_openlibs_original;\n_luaL_loadfilex luaL_loadfilex;\n_lua_pcall lua_pcall;\nBYTE orig_code[5];\nBYTE jmp_code[5] = { 0xe9 };\n\nvoid MyHook();\nvoid ChooseProc();\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                       DWORD  ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n\t\tChooseProc();\n\t\tbreak;\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n\nint luaL_openlibs_hook(lua_State *L)\n{\n\tWriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &orig_code, 5, NULL);\t//恢复原函数\n\tint ret = luaL_openlibs_original(L);\n\tWriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &jmp_code, 5, NULL);\t//修改原函数\n\tluaL_loadfilex(L, \"debug.lua\", NULL) || lua_pcall(L, 0, -1, 0);\t//加载我们的lua脚本，将脚本放在游戏目录下即可\n\tMessageBox(NULL, L\"Hook success\", L\"Success\", MB_OK);\n\treturn ret;\n}\n\nvoid MyHook()\n{\n\tHMODULE hModule = GetModuleHandle(L\"lua51.dll\");\n\tif (!hModule)\n\t{\n\t\tMessageBox(NULL, L\"lua51.dll not found!\", L\"Fail\", MB_OK);\n\t\treturn;\n\t}\n\tluaL_openlibs_original = (_luaL_openlibs)GetProcAddress(hModule, \"luaL_openlibs\");\n\tluaL_loadfilex = (_luaL_loadfilex)GetProcAddress(hModule, \"luaL_loadfilex\");\n\tlua_pcall = (_lua_pcall)GetProcAddress(hModule, \"lua_pcall\");\n\tif (!luaL_openlibs_original || !luaL_loadfilex || !lua_pcall)\n\t{\n\t\tMessageBox(NULL, L\"function not found\", L\"Fail\", MB_OK);\n\t\treturn;\n\t}\n\t//保存原函数字节\n\tif (!ReadProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &orig_code, 5, NULL))\n\t{\n\t\tMessageBox(NULL, L\"ReadProcessMemory fail\", L\"Fail\", MB_OK);\n\t}\n\n\t//修改原函数\n\t*(DWORD*)(jmp_code + 1) = (DWORD)luaL_openlibs_hook - (DWORD)luaL_openlibs_original - 5;\n\tif (!WriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &jmp_code, 5, NULL))\n\t{\n\t\tMessageBox(NULL, L\"WriteProcessMemory fail\", L\"Fail\", MB_OK);\n\t}\n}\n\nvoid ChooseProc()\n{\n\tWCHAR szPath[MAX_PATH];\n\tWCHAR *p = NULL;\n\n\tGetModuleFileName(NULL, szPath, MAX_PATH);\n\tp = wcsrchr(szPath, L'\\\\');\n\t\n\tif (!wcscmp(p + 1, L\"梦战.exe\"))\t//要hook的进程名称\n\t{\n\t\tMyHook();\n\t\tMessageBox(NULL, L\"DLL inject\", L\"Success\", MB_OK);\n\t}\n}\n```\n\n代码比较丑，各种英文语法问题请见谅，看得懂就行。\n\n通过GetProcAddress就可以直接获得我们需要的三个函数的地址，其中luaL_openlibs是我们需要hook的函数，luaL_loadfilex和lua_pcall则是来加载我们写的用来debug的lua脚本。其中ChooseProc是我用SetWindowsHookEx时用来筛选注入进程的，但是因为后来用了注入工具，所以这里会显得比较多余。\n\n\n\n# debug.lua\n\n这个就是我们用来获取信息的lua脚本。参考了国外大神的代码并结合实际游戏之后，我的代码如下。\n\n```lua\n--lua无法debug即时编译过后的代码，根据实际情况选择是否关闭jit。\njit.off()\n\nfunction re_print(t,prefix,file)\n    for k,v in pairs(t) do\n        if type(v) == \"function\" then\n            file:write(string.format(\"%s => %s\",\"_G.\" .. k,v) .. \"\\n\")\n            --[[\n        else\n            file:write(prefix .. \".\" .. k .. \"\\n\")\n            --]]\n        end\n        if type(v) == \"table\" and k ~= \"_G\" and k ~= \"_G._G\" and not v.package then\n            re_print(v, \"\\t\" .. prefix .. \".\" .. k, file)\n        end\n    end\nend\n\nfunction dumpGlobals()\n    local fname = \"globals_\" .. \".txt\"\n    local globalsFile = io.open(fname, \"w\")\n\n    re_print(_G,\"_G\",globalsFile)\n\n    globalsFile:flush()\n    globalsFile:close()\nend\n\nfunction trace(event, line)\n    local info = debug.getinfo(2)\n\n    if not info then return end\n    if not info.name then return end\n    \n    dumpGlobals()\n    \n    --下面注释的代码是获取函数信息的，结合了实际情况之后我并没有使用，详情参考国外大神文章\n    --[[\n    local fname = \"trace_\" .. \".txt\"\n    local traceFile = io.open(fname, \"a\")\n    traceFile:write(info.name .. \"()\\n\")\n\n    local a = 1\n    while true do\n        local name, value = debug.getlocal(2, a)\n        if not name then break end\n        if not value then break end\n        traceFile:write(tostring(name) .. \": \" .. tostring(value) .. \"\\n\")\n        a = a + 1\n    end\n    traceFile:flush()\n    traceFile:close()\n    --]]\nend\n\ndebug.sethook(trace, \"c\")\n\n```\n\n`dumpGlobals`函数中，将名为\\_G的表打印出来并保存到游戏目录下。\\_G是Lua的全局对象表，这个表储存了很多跟游戏有关的关键信息，有很大的价值。其中`re_print`函数是我从网上参考来的一份可以遍历所有table的代码，因为我只想要获得跟函数有关的信息，所以我在其中加了一句`if type(v) == \"function\"`来筛选出\\_G表中存储的函数。\n\n`debug.sethook(trace, \"c\")`使Lua在每个函数完成之前调用`trace`这个函数，在`trace`中，我们就可以调用`dumpGlobals`了。但是因为不知道游戏什么时候会把全局变量分配完毕，所以我们只好不设限制的一直调用`dumpGlobals`。当调用脚本后，可能会比较卡，但是开启游戏后就可以马上关掉游戏了，一般来讲游戏开启后在我们没有反应过来时全局变量都已经分配好了。\n\n\n\n# 观察_G全局变量表内容\n\n我们使用工具，选择dll的路径和游戏的路径并点击执行，在开启游戏后就可以立马关闭游戏，我们可以看到游戏目录下多了个globals_.txt文件，这就是我们打印出来的全局变量表，我在里面发现了很有意思的东西。\n\n```\n...省略一大部分...\n_G.渲染函数 => function: 0x057622e0\n_G.领取沉船传信 => function: 0x02b313e8\n_G.结算保护夕仔 => function: 0x02b315c8\n_G.dofile => function: builtin#25\n_G.领取押镖任务 => function: 0x02b31430\n_G.防修改 => function: 0x0562d190\t\t\t<------防修改关键函数\n_G.是否拥有效果 => function: 0x02b314f0\n_G.取效果剩余时间 => function: 0x02b31508\n_G.洗点 => function: 0x02b31610\n_G.xpcall => function: builtin#21\n_G.领取剑指凶狼 => function: 0x02b31418\n_G.角色修炼 => function: 0x02b31568\n_G.载入视频 => function: 0x04a7ac18\n_G.置纹理过滤 => function: 0x02b406f8\n_G.停止视频 => function: 0x04a7ac78\n...省略一大部分...\n```\n\n这个游戏的Lua脚本很多都是用了中文，这个防修改就直接写脸上了，一下就看到了。知道了函数名称后我们就可以干坏事了。\n\n\n\n# debug.lua（改）\n\n这里我偷个懒，直接修改一下debug.lua内容，把防修改过掉。\n\n```\nfunction 反防修改()\n    return\nend\n\nfunction trace(event, line)\n    防修改 = 反防修改\nend\n\ndebug.sethook(trace, \"c\")\n\n```\n\n文件记得使用GBK编码格式，不然这个游戏不认文件中的汉字。\n\n我们把防修改直接替换成我们写的反防修改，反防修改是一个空函数，游戏调用防修改这个函数的时候，就相当于是在调用我们的反防修改函数，然后就是啥都没有做。将debug.lua放在游戏目录下并使用注入工具注入我们的dll就可以过掉反修改。\n\n效果图如下，\n\n没有反防修改时：\n\n![](http://wx1.sinaimg.cn/large/006juYZNgy1fsnq8cvf88g30zy0lj1l1.gif)\n\n有反防修改时：\n\n![](http://wx3.sinaimg.cn/large/006juYZNgy1fsnq8n4jyyg30zy0lj7wm.gif)\n\n当然这个方法非常的不优雅，不过因为我对Lua并不是很熟悉，所以我也没有再多研究了。\n\n\n\n# 后记\n\n其实这是个相当厉害的技术，不过本人水平有限，没办法给大家展现更多东西，有兴趣的可以自己研究研究。","slug":"对LuaJIT制作的游戏的简单修改（二）","published":1,"updated":"2018-06-25T13:11:50.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiynqky50003novzxj0gmhzw","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本次修改的游戏还是在（一）中所讲的游戏，这一次的目的是要把游戏的反修改处理掉。但是跟（一）中不同的是这一次用到的技术会更高级一点，直接对LuaJIT进行hook。我们可以直接使用Lua自带的debug库来获得大量的信息，并且能够进行修改。</p>\n<p>参考了国外大神的文章：</p>\n<p><a href=\"https://nickcano.com/hooking-luajit/\" target=\"_blank\" rel=\"noopener\">Hooking LuaJIT</a>（原文）</p>\n<p><a href=\"https://www.anquanke.com/post/id/86958\" target=\"_blank\" rel=\"noopener\">看我如何通过hook攻击LuaJIT</a>（译文）</p>\n<a id=\"more\"></a>\n<h1 id=\"注入Lua代码\"><a href=\"#注入Lua代码\" class=\"headerlink\" title=\"注入Lua代码\"></a>注入Lua代码</h1><p>为了注入我们自己的Lua代码，我们需要获得游戏调用luaL_newstate返回的lua_State对象，其实就是Lua代码运行的一个环境。如国外大神的文章所说，直接hook luaL_newstate这个函数是不太妥当的，因为这时候库还没有加载，debug功能无法使用，所以可以选择hook luaL_openlibs这个函数，当然如果hook了luaL_newstate也是可以的，只需要自己手动调用一下luaL_openlibs就行。为了加载我们的代码，我们还需要得到luaL_loadfilex和lua_pcall两个函数的地址。</p>\n<p>确定了所需要hook的函数之后，接下来就是确定hook方式。一般来讲是用dll来完成我们的hook，但是注入dll的时机却是个问题。luaL_openlibs一般是在luaL_newstate之后就马上调用，而luaL_newstate一般是在程序一开始时就会调用。一开始我使用SetWindowsHookEx并且第一个参数使用WH_SHELL来注入dll，这样只要游戏创建窗口的时候我们的dll就会被注入进去，但是经过实验之后效果并不理想，因为这个游戏在创建窗口之前就已经调用了luaL_openlibs，所以我们的hook代码并没有被执行。于是我采用了第二种方法，创建进程的时候直接注入dll。为此我参考了网上的一些源码，写了一个注入工具（只支持32位）。</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fsnnvv660pj30ga091dfs.jpg\" alt=\"\"></p>\n<p>接下来就是dll的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>* lua_State;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*_luaL_loadfilex)</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *mode)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*_luaL_openlibs)</span><span class=\"params\">(lua_State *L)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*_lua_pcall)</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> nargs, <span class=\"keyword\">int</span> nresults, <span class=\"keyword\">int</span> errfunc)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">_luaL_openlibs luaL_openlibs_original;</span><br><span class=\"line\">_luaL_loadfilex luaL_loadfilex;</span><br><span class=\"line\">_lua_pcall lua_pcall;</span><br><span class=\"line\">BYTE orig_code[<span class=\"number\">5</span>];</span><br><span class=\"line\">BYTE jmp_code[<span class=\"number\">5</span>] = &#123; <span class=\"number\">0xe9</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyHook</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ChooseProc</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL APIENTRY <span class=\"title\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       LPVOID lpReserved</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">\t\tChooseProc();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">luaL_openlibs_hook</span><span class=\"params\">(lua_State *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tWriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &amp;orig_code, <span class=\"number\">5</span>, <span class=\"literal\">NULL</span>);\t<span class=\"comment\">//恢复原函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = luaL_openlibs_original(L);</span><br><span class=\"line\">\tWriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &amp;jmp_code, <span class=\"number\">5</span>, <span class=\"literal\">NULL</span>);\t<span class=\"comment\">//修改原函数</span></span><br><span class=\"line\">\tluaL_loadfilex(L, <span class=\"string\">\"debug.lua\"</span>, <span class=\"literal\">NULL</span>) || lua_pcall(L, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);\t<span class=\"comment\">//加载我们的lua脚本，将脚本放在游戏目录下即可</span></span><br><span class=\"line\">\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"Hook success\"</span>, <span class=\"string\">L\"Success\"</span>, MB_OK);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyHook</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHMODULE hModule = GetModuleHandle(<span class=\"string\">L\"lua51.dll\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hModule)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"lua51.dll not found!\"</span>, <span class=\"string\">L\"Fail\"</span>, MB_OK);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tluaL_openlibs_original = (_luaL_openlibs)GetProcAddress(hModule, <span class=\"string\">\"luaL_openlibs\"</span>);</span><br><span class=\"line\">\tluaL_loadfilex = (_luaL_loadfilex)GetProcAddress(hModule, <span class=\"string\">\"luaL_loadfilex\"</span>);</span><br><span class=\"line\">\tlua_pcall = (_lua_pcall)GetProcAddress(hModule, <span class=\"string\">\"lua_pcall\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!luaL_openlibs_original || !luaL_loadfilex || !lua_pcall)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"function not found\"</span>, <span class=\"string\">L\"Fail\"</span>, MB_OK);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//保存原函数字节</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ReadProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &amp;orig_code, <span class=\"number\">5</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"ReadProcessMemory fail\"</span>, <span class=\"string\">L\"Fail\"</span>, MB_OK);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//修改原函数</span></span><br><span class=\"line\">\t*(DWORD*)(jmp_code + <span class=\"number\">1</span>) = (DWORD)luaL_openlibs_hook - (DWORD)luaL_openlibs_original - <span class=\"number\">5</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!WriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &amp;jmp_code, <span class=\"number\">5</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"WriteProcessMemory fail\"</span>, <span class=\"string\">L\"Fail\"</span>, MB_OK);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ChooseProc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tWCHAR szPath[MAX_PATH];</span><br><span class=\"line\">\tWCHAR *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGetModuleFileName(<span class=\"literal\">NULL</span>, szPath, MAX_PATH);</span><br><span class=\"line\">\tp = wcsrchr(szPath, L'\\\\');</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!wcscmp(p + <span class=\"number\">1</span>, <span class=\"string\">L\"梦战.exe\"</span>))\t<span class=\"comment\">//要hook的进程名称</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMyHook();</span><br><span class=\"line\">\t\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"DLL inject\"</span>, <span class=\"string\">L\"Success\"</span>, MB_OK);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码比较丑，各种英文语法问题请见谅，看得懂就行。</p>\n<p>通过GetProcAddress就可以直接获得我们需要的三个函数的地址，其中luaL_openlibs是我们需要hook的函数，luaL_loadfilex和lua_pcall则是来加载我们写的用来debug的lua脚本。其中ChooseProc是我用SetWindowsHookEx时用来筛选注入进程的，但是因为后来用了注入工具，所以这里会显得比较多余。</p>\n<h1 id=\"debug-lua\"><a href=\"#debug-lua\" class=\"headerlink\" title=\"debug.lua\"></a>debug.lua</h1><p>这个就是我们用来获取信息的lua脚本。参考了国外大神的代码并结合实际游戏之后，我的代码如下。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--lua无法debug即时编译过后的代码，根据实际情况选择是否关闭jit。</span></span><br><span class=\"line\">jit.off()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">re_print</span><span class=\"params\">(t,prefix,file)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(t) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(v) == <span class=\"string\">\"function\"</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            file:<span class=\"built_in\">write</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">\"%s =&gt; %s\"</span>,<span class=\"string\">\"_G.\"</span> .. k,v) .. <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">            <span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">        else</span></span><br><span class=\"line\"><span class=\"comment\">            file:write(prefix .. \".\" .. k .. \"\\n\")</span></span><br><span class=\"line\"><span class=\"comment\">            --]]</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(v) == <span class=\"string\">\"table\"</span> <span class=\"keyword\">and</span> k ~= <span class=\"string\">\"_G\"</span> <span class=\"keyword\">and</span> k ~= <span class=\"string\">\"_G._G\"</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> v.<span class=\"built_in\">package</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            re_print(v, <span class=\"string\">\"\\t\"</span> .. prefix .. <span class=\"string\">\".\"</span> .. k, file)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dumpGlobals</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> fname = <span class=\"string\">\"globals_\"</span> .. <span class=\"string\">\".txt\"</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> globalsFile = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span>(fname, <span class=\"string\">\"w\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    re_print(<span class=\"built_in\">_G</span>,<span class=\"string\">\"_G\"</span>,globalsFile)</span><br><span class=\"line\"></span><br><span class=\"line\">    globalsFile:<span class=\"built_in\">flush</span>()</span><br><span class=\"line\">    globalsFile:<span class=\"built_in\">close</span>()</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trace</span><span class=\"params\">(event, line)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> info = <span class=\"built_in\">debug</span>.<span class=\"built_in\">getinfo</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> info <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> info.name <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    dumpGlobals()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">--下面注释的代码是获取函数信息的，结合了实际情况之后我并没有使用，详情参考国外大神文章</span></span><br><span class=\"line\">    <span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    local fname = \"trace_\" .. \".txt\"</span></span><br><span class=\"line\"><span class=\"comment\">    local traceFile = io.open(fname, \"a\")</span></span><br><span class=\"line\"><span class=\"comment\">    traceFile:write(info.name .. \"()\\n\")</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    local a = 1</span></span><br><span class=\"line\"><span class=\"comment\">    while true do</span></span><br><span class=\"line\"><span class=\"comment\">        local name, value = debug.getlocal(2, a)</span></span><br><span class=\"line\"><span class=\"comment\">        if not name then break end</span></span><br><span class=\"line\"><span class=\"comment\">        if not value then break end</span></span><br><span class=\"line\"><span class=\"comment\">        traceFile:write(tostring(name) .. \": \" .. tostring(value) .. \"\\n\")</span></span><br><span class=\"line\"><span class=\"comment\">        a = a + 1</span></span><br><span class=\"line\"><span class=\"comment\">    end</span></span><br><span class=\"line\"><span class=\"comment\">    traceFile:flush()</span></span><br><span class=\"line\"><span class=\"comment\">    traceFile:close()</span></span><br><span class=\"line\"><span class=\"comment\">    --]]</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">debug</span>.<span class=\"built_in\">sethook</span>(trace, <span class=\"string\">\"c\"</span>)</span><br></pre></td></tr></table></figure>\n<p><code>dumpGlobals</code>函数中，将名为_G的表打印出来并保存到游戏目录下。_G是Lua的全局对象表，这个表储存了很多跟游戏有关的关键信息，有很大的价值。其中<code>re_print</code>函数是我从网上参考来的一份可以遍历所有table的代码，因为我只想要获得跟函数有关的信息，所以我在其中加了一句<code>if type(v) == &quot;function&quot;</code>来筛选出_G表中存储的函数。</p>\n<p><code>debug.sethook(trace, &quot;c&quot;)</code>使Lua在每个函数完成之前调用<code>trace</code>这个函数，在<code>trace</code>中，我们就可以调用<code>dumpGlobals</code>了。但是因为不知道游戏什么时候会把全局变量分配完毕，所以我们只好不设限制的一直调用<code>dumpGlobals</code>。当调用脚本后，可能会比较卡，但是开启游戏后就可以马上关掉游戏了，一般来讲游戏开启后在我们没有反应过来时全局变量都已经分配好了。</p>\n<h1 id=\"观察-G全局变量表内容\"><a href=\"#观察-G全局变量表内容\" class=\"headerlink\" title=\"观察_G全局变量表内容\"></a>观察_G全局变量表内容</h1><p>我们使用工具，选择dll的路径和游戏的路径并点击执行，在开启游戏后就可以立马关闭游戏，我们可以看到游戏目录下多了个globals_.txt文件，这就是我们打印出来的全局变量表，我在里面发现了很有意思的东西。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...省略一大部分...</span><br><span class=\"line\">_G.渲染函数 =&gt; function: 0x057622e0</span><br><span class=\"line\">_G.领取沉船传信 =&gt; function: 0x02b313e8</span><br><span class=\"line\">_G.结算保护夕仔 =&gt; function: 0x02b315c8</span><br><span class=\"line\">_G.dofile =&gt; function: builtin#25</span><br><span class=\"line\">_G.领取押镖任务 =&gt; function: 0x02b31430</span><br><span class=\"line\">_G.防修改 =&gt; function: 0x0562d190\t\t\t&lt;------防修改关键函数</span><br><span class=\"line\">_G.是否拥有效果 =&gt; function: 0x02b314f0</span><br><span class=\"line\">_G.取效果剩余时间 =&gt; function: 0x02b31508</span><br><span class=\"line\">_G.洗点 =&gt; function: 0x02b31610</span><br><span class=\"line\">_G.xpcall =&gt; function: builtin#21</span><br><span class=\"line\">_G.领取剑指凶狼 =&gt; function: 0x02b31418</span><br><span class=\"line\">_G.角色修炼 =&gt; function: 0x02b31568</span><br><span class=\"line\">_G.载入视频 =&gt; function: 0x04a7ac18</span><br><span class=\"line\">_G.置纹理过滤 =&gt; function: 0x02b406f8</span><br><span class=\"line\">_G.停止视频 =&gt; function: 0x04a7ac78</span><br><span class=\"line\">...省略一大部分...</span><br></pre></td></tr></table></figure>\n<p>这个游戏的Lua脚本很多都是用了中文，这个防修改就直接写脸上了，一下就看到了。知道了函数名称后我们就可以干坏事了。</p>\n<h1 id=\"debug-lua（改）\"><a href=\"#debug-lua（改）\" class=\"headerlink\" title=\"debug.lua（改）\"></a>debug.lua（改）</h1><p>这里我偷个懒，直接修改一下debug.lua内容，把防修改过掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function 反防修改()</span><br><span class=\"line\">    return</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function trace(event, line)</span><br><span class=\"line\">    防修改 = 反防修改</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">debug.sethook(trace, &quot;c&quot;)</span><br></pre></td></tr></table></figure>\n<p>文件记得使用GBK编码格式，不然这个游戏不认文件中的汉字。</p>\n<p>我们把防修改直接替换成我们写的反防修改，反防修改是一个空函数，游戏调用防修改这个函数的时候，就相当于是在调用我们的反防修改函数，然后就是啥都没有做。将debug.lua放在游戏目录下并使用注入工具注入我们的dll就可以过掉反修改。</p>\n<p>效果图如下，</p>\n<p>没有反防修改时：</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fsnq8cvf88g30zy0lj1l1.gif\" alt=\"\"></p>\n<p>有反防修改时：</p>\n<p><img src=\"http://wx3.sinaimg.cn/large/006juYZNgy1fsnq8n4jyyg30zy0lj7wm.gif\" alt=\"\"></p>\n<p>当然这个方法非常的不优雅，不过因为我对Lua并不是很熟悉，所以我也没有再多研究了。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>其实这是个相当厉害的技术，不过本人水平有限，没办法给大家展现更多东西，有兴趣的可以自己研究研究。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本次修改的游戏还是在（一）中所讲的游戏，这一次的目的是要把游戏的反修改处理掉。但是跟（一）中不同的是这一次用到的技术会更高级一点，直接对LuaJIT进行hook。我们可以直接使用Lua自带的debug库来获得大量的信息，并且能够进行修改。</p>\n<p>参考了国外大神的文章：</p>\n<p><a href=\"https://nickcano.com/hooking-luajit/\" target=\"_blank\" rel=\"noopener\">Hooking LuaJIT</a>（原文）</p>\n<p><a href=\"https://www.anquanke.com/post/id/86958\" target=\"_blank\" rel=\"noopener\">看我如何通过hook攻击LuaJIT</a>（译文）</p>","more":"<h1 id=\"注入Lua代码\"><a href=\"#注入Lua代码\" class=\"headerlink\" title=\"注入Lua代码\"></a>注入Lua代码</h1><p>为了注入我们自己的Lua代码，我们需要获得游戏调用luaL_newstate返回的lua_State对象，其实就是Lua代码运行的一个环境。如国外大神的文章所说，直接hook luaL_newstate这个函数是不太妥当的，因为这时候库还没有加载，debug功能无法使用，所以可以选择hook luaL_openlibs这个函数，当然如果hook了luaL_newstate也是可以的，只需要自己手动调用一下luaL_openlibs就行。为了加载我们的代码，我们还需要得到luaL_loadfilex和lua_pcall两个函数的地址。</p>\n<p>确定了所需要hook的函数之后，接下来就是确定hook方式。一般来讲是用dll来完成我们的hook，但是注入dll的时机却是个问题。luaL_openlibs一般是在luaL_newstate之后就马上调用，而luaL_newstate一般是在程序一开始时就会调用。一开始我使用SetWindowsHookEx并且第一个参数使用WH_SHELL来注入dll，这样只要游戏创建窗口的时候我们的dll就会被注入进去，但是经过实验之后效果并不理想，因为这个游戏在创建窗口之前就已经调用了luaL_openlibs，所以我们的hook代码并没有被执行。于是我采用了第二种方法，创建进程的时候直接注入dll。为此我参考了网上的一些源码，写了一个注入工具（只支持32位）。</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fsnnvv660pj30ga091dfs.jpg\" alt=\"\"></p>\n<p>接下来就是dll的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>* lua_State;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*_luaL_loadfilex)</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *mode)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*_luaL_openlibs)</span><span class=\"params\">(lua_State *L)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*_lua_pcall)</span><span class=\"params\">(lua_State *L, <span class=\"keyword\">int</span> nargs, <span class=\"keyword\">int</span> nresults, <span class=\"keyword\">int</span> errfunc)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">_luaL_openlibs luaL_openlibs_original;</span><br><span class=\"line\">_luaL_loadfilex luaL_loadfilex;</span><br><span class=\"line\">_lua_pcall lua_pcall;</span><br><span class=\"line\">BYTE orig_code[<span class=\"number\">5</span>];</span><br><span class=\"line\">BYTE jmp_code[<span class=\"number\">5</span>] = &#123; <span class=\"number\">0xe9</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyHook</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ChooseProc</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL APIENTRY <span class=\"title\">DllMain</span><span class=\"params\">( HMODULE hModule,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       DWORD  ul_reason_for_call,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       LPVOID lpReserved</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">\t\tChooseProc();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">luaL_openlibs_hook</span><span class=\"params\">(lua_State *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tWriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &amp;orig_code, <span class=\"number\">5</span>, <span class=\"literal\">NULL</span>);\t<span class=\"comment\">//恢复原函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = luaL_openlibs_original(L);</span><br><span class=\"line\">\tWriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &amp;jmp_code, <span class=\"number\">5</span>, <span class=\"literal\">NULL</span>);\t<span class=\"comment\">//修改原函数</span></span><br><span class=\"line\">\tluaL_loadfilex(L, <span class=\"string\">\"debug.lua\"</span>, <span class=\"literal\">NULL</span>) || lua_pcall(L, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);\t<span class=\"comment\">//加载我们的lua脚本，将脚本放在游戏目录下即可</span></span><br><span class=\"line\">\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"Hook success\"</span>, <span class=\"string\">L\"Success\"</span>, MB_OK);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyHook</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHMODULE hModule = GetModuleHandle(<span class=\"string\">L\"lua51.dll\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hModule)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"lua51.dll not found!\"</span>, <span class=\"string\">L\"Fail\"</span>, MB_OK);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tluaL_openlibs_original = (_luaL_openlibs)GetProcAddress(hModule, <span class=\"string\">\"luaL_openlibs\"</span>);</span><br><span class=\"line\">\tluaL_loadfilex = (_luaL_loadfilex)GetProcAddress(hModule, <span class=\"string\">\"luaL_loadfilex\"</span>);</span><br><span class=\"line\">\tlua_pcall = (_lua_pcall)GetProcAddress(hModule, <span class=\"string\">\"lua_pcall\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!luaL_openlibs_original || !luaL_loadfilex || !lua_pcall)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"function not found\"</span>, <span class=\"string\">L\"Fail\"</span>, MB_OK);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//保存原函数字节</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ReadProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &amp;orig_code, <span class=\"number\">5</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"ReadProcessMemory fail\"</span>, <span class=\"string\">L\"Fail\"</span>, MB_OK);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//修改原函数</span></span><br><span class=\"line\">\t*(DWORD*)(jmp_code + <span class=\"number\">1</span>) = (DWORD)luaL_openlibs_hook - (DWORD)luaL_openlibs_original - <span class=\"number\">5</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!WriteProcessMemory(GetCurrentProcess(), luaL_openlibs_original, &amp;jmp_code, <span class=\"number\">5</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"WriteProcessMemory fail\"</span>, <span class=\"string\">L\"Fail\"</span>, MB_OK);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ChooseProc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tWCHAR szPath[MAX_PATH];</span><br><span class=\"line\">\tWCHAR *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGetModuleFileName(<span class=\"literal\">NULL</span>, szPath, MAX_PATH);</span><br><span class=\"line\">\tp = wcsrchr(szPath, L'\\\\');</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!wcscmp(p + <span class=\"number\">1</span>, <span class=\"string\">L\"梦战.exe\"</span>))\t<span class=\"comment\">//要hook的进程名称</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMyHook();</span><br><span class=\"line\">\t\tMessageBox(<span class=\"literal\">NULL</span>, <span class=\"string\">L\"DLL inject\"</span>, <span class=\"string\">L\"Success\"</span>, MB_OK);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码比较丑，各种英文语法问题请见谅，看得懂就行。</p>\n<p>通过GetProcAddress就可以直接获得我们需要的三个函数的地址，其中luaL_openlibs是我们需要hook的函数，luaL_loadfilex和lua_pcall则是来加载我们写的用来debug的lua脚本。其中ChooseProc是我用SetWindowsHookEx时用来筛选注入进程的，但是因为后来用了注入工具，所以这里会显得比较多余。</p>\n<h1 id=\"debug-lua\"><a href=\"#debug-lua\" class=\"headerlink\" title=\"debug.lua\"></a>debug.lua</h1><p>这个就是我们用来获取信息的lua脚本。参考了国外大神的代码并结合实际游戏之后，我的代码如下。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--lua无法debug即时编译过后的代码，根据实际情况选择是否关闭jit。</span></span><br><span class=\"line\">jit.off()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">re_print</span><span class=\"params\">(t,prefix,file)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(t) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(v) == <span class=\"string\">\"function\"</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            file:<span class=\"built_in\">write</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">\"%s =&gt; %s\"</span>,<span class=\"string\">\"_G.\"</span> .. k,v) .. <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">            <span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">        else</span></span><br><span class=\"line\"><span class=\"comment\">            file:write(prefix .. \".\" .. k .. \"\\n\")</span></span><br><span class=\"line\"><span class=\"comment\">            --]]</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(v) == <span class=\"string\">\"table\"</span> <span class=\"keyword\">and</span> k ~= <span class=\"string\">\"_G\"</span> <span class=\"keyword\">and</span> k ~= <span class=\"string\">\"_G._G\"</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> v.<span class=\"built_in\">package</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            re_print(v, <span class=\"string\">\"\\t\"</span> .. prefix .. <span class=\"string\">\".\"</span> .. k, file)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dumpGlobals</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> fname = <span class=\"string\">\"globals_\"</span> .. <span class=\"string\">\".txt\"</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> globalsFile = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span>(fname, <span class=\"string\">\"w\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    re_print(<span class=\"built_in\">_G</span>,<span class=\"string\">\"_G\"</span>,globalsFile)</span><br><span class=\"line\"></span><br><span class=\"line\">    globalsFile:<span class=\"built_in\">flush</span>()</span><br><span class=\"line\">    globalsFile:<span class=\"built_in\">close</span>()</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trace</span><span class=\"params\">(event, line)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> info = <span class=\"built_in\">debug</span>.<span class=\"built_in\">getinfo</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> info <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> info.name <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    dumpGlobals()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">--下面注释的代码是获取函数信息的，结合了实际情况之后我并没有使用，详情参考国外大神文章</span></span><br><span class=\"line\">    <span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    local fname = \"trace_\" .. \".txt\"</span></span><br><span class=\"line\"><span class=\"comment\">    local traceFile = io.open(fname, \"a\")</span></span><br><span class=\"line\"><span class=\"comment\">    traceFile:write(info.name .. \"()\\n\")</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    local a = 1</span></span><br><span class=\"line\"><span class=\"comment\">    while true do</span></span><br><span class=\"line\"><span class=\"comment\">        local name, value = debug.getlocal(2, a)</span></span><br><span class=\"line\"><span class=\"comment\">        if not name then break end</span></span><br><span class=\"line\"><span class=\"comment\">        if not value then break end</span></span><br><span class=\"line\"><span class=\"comment\">        traceFile:write(tostring(name) .. \": \" .. tostring(value) .. \"\\n\")</span></span><br><span class=\"line\"><span class=\"comment\">        a = a + 1</span></span><br><span class=\"line\"><span class=\"comment\">    end</span></span><br><span class=\"line\"><span class=\"comment\">    traceFile:flush()</span></span><br><span class=\"line\"><span class=\"comment\">    traceFile:close()</span></span><br><span class=\"line\"><span class=\"comment\">    --]]</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">debug</span>.<span class=\"built_in\">sethook</span>(trace, <span class=\"string\">\"c\"</span>)</span><br></pre></td></tr></table></figure>\n<p><code>dumpGlobals</code>函数中，将名为_G的表打印出来并保存到游戏目录下。_G是Lua的全局对象表，这个表储存了很多跟游戏有关的关键信息，有很大的价值。其中<code>re_print</code>函数是我从网上参考来的一份可以遍历所有table的代码，因为我只想要获得跟函数有关的信息，所以我在其中加了一句<code>if type(v) == &quot;function&quot;</code>来筛选出_G表中存储的函数。</p>\n<p><code>debug.sethook(trace, &quot;c&quot;)</code>使Lua在每个函数完成之前调用<code>trace</code>这个函数，在<code>trace</code>中，我们就可以调用<code>dumpGlobals</code>了。但是因为不知道游戏什么时候会把全局变量分配完毕，所以我们只好不设限制的一直调用<code>dumpGlobals</code>。当调用脚本后，可能会比较卡，但是开启游戏后就可以马上关掉游戏了，一般来讲游戏开启后在我们没有反应过来时全局变量都已经分配好了。</p>\n<h1 id=\"观察-G全局变量表内容\"><a href=\"#观察-G全局变量表内容\" class=\"headerlink\" title=\"观察_G全局变量表内容\"></a>观察_G全局变量表内容</h1><p>我们使用工具，选择dll的路径和游戏的路径并点击执行，在开启游戏后就可以立马关闭游戏，我们可以看到游戏目录下多了个globals_.txt文件，这就是我们打印出来的全局变量表，我在里面发现了很有意思的东西。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...省略一大部分...</span><br><span class=\"line\">_G.渲染函数 =&gt; function: 0x057622e0</span><br><span class=\"line\">_G.领取沉船传信 =&gt; function: 0x02b313e8</span><br><span class=\"line\">_G.结算保护夕仔 =&gt; function: 0x02b315c8</span><br><span class=\"line\">_G.dofile =&gt; function: builtin#25</span><br><span class=\"line\">_G.领取押镖任务 =&gt; function: 0x02b31430</span><br><span class=\"line\">_G.防修改 =&gt; function: 0x0562d190\t\t\t&lt;------防修改关键函数</span><br><span class=\"line\">_G.是否拥有效果 =&gt; function: 0x02b314f0</span><br><span class=\"line\">_G.取效果剩余时间 =&gt; function: 0x02b31508</span><br><span class=\"line\">_G.洗点 =&gt; function: 0x02b31610</span><br><span class=\"line\">_G.xpcall =&gt; function: builtin#21</span><br><span class=\"line\">_G.领取剑指凶狼 =&gt; function: 0x02b31418</span><br><span class=\"line\">_G.角色修炼 =&gt; function: 0x02b31568</span><br><span class=\"line\">_G.载入视频 =&gt; function: 0x04a7ac18</span><br><span class=\"line\">_G.置纹理过滤 =&gt; function: 0x02b406f8</span><br><span class=\"line\">_G.停止视频 =&gt; function: 0x04a7ac78</span><br><span class=\"line\">...省略一大部分...</span><br></pre></td></tr></table></figure>\n<p>这个游戏的Lua脚本很多都是用了中文，这个防修改就直接写脸上了，一下就看到了。知道了函数名称后我们就可以干坏事了。</p>\n<h1 id=\"debug-lua（改）\"><a href=\"#debug-lua（改）\" class=\"headerlink\" title=\"debug.lua（改）\"></a>debug.lua（改）</h1><p>这里我偷个懒，直接修改一下debug.lua内容，把防修改过掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function 反防修改()</span><br><span class=\"line\">    return</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function trace(event, line)</span><br><span class=\"line\">    防修改 = 反防修改</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">debug.sethook(trace, &quot;c&quot;)</span><br></pre></td></tr></table></figure>\n<p>文件记得使用GBK编码格式，不然这个游戏不认文件中的汉字。</p>\n<p>我们把防修改直接替换成我们写的反防修改，反防修改是一个空函数，游戏调用防修改这个函数的时候，就相当于是在调用我们的反防修改函数，然后就是啥都没有做。将debug.lua放在游戏目录下并使用注入工具注入我们的dll就可以过掉反修改。</p>\n<p>效果图如下，</p>\n<p>没有反防修改时：</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/006juYZNgy1fsnq8cvf88g30zy0lj1l1.gif\" alt=\"\"></p>\n<p>有反防修改时：</p>\n<p><img src=\"http://wx3.sinaimg.cn/large/006juYZNgy1fsnq8n4jyyg30zy0lj7wm.gif\" alt=\"\"></p>\n<p>当然这个方法非常的不优雅，不过因为我对Lua并不是很熟悉，所以我也没有再多研究了。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>其实这是个相当厉害的技术，不过本人水平有限，没办法给大家展现更多东西，有兴趣的可以自己研究研究。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}